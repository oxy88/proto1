import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type BasketballProfile implements Node {
  id: ID!
  players: Int
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
}

type Chat implements Node {
  id: ID!
  createdAt: DateTime!
  text: String
  user(where: UserWhereInput): User!
  chatRoom(where: ChatRoomWhereInput): ChatRoom!
}

type ChatRoom implements Node {
  id: ID!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GameProfile implements Node {
  id: ID!
  gameCategory: GameCategory
  pubg(where: PubgProfileWhereInput): PubgProfile
  lol(where: LolProfileWhereInput): LolProfile
}

type LolProfile implements Node {
  id: ID!
  gameProfile(where: GameProfileWhereInput): GameProfile
  mode: LolMode
  role: LolRole
}

type Profile implements Node {
  id: ID!
  category: Category
  gameProfile(where: GameProfileWhereInput): GameProfile
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
  user(where: UserWhereInput): User
}

type PubgProfile implements Node {
  id: ID!
  gameProfile(where: GameProfileWhereInput): GameProfile
  mode: PubgMode
  server: PubgServer
}

type SoccerProfile implements Node {
  id: ID!
  players: Int
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
}

type SportsProfile implements Node {
  id: ID!
  sportsCategory: SportsCategory
  soccer(where: SoccerProfileWhereInput): SoccerProfile
  basketball(where: BasketballProfileWhereInput): BasketballProfile
}

type User implements Node {
  id: ID!
  facebookUserId: String
  googleUserId: String
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
}


#
# Other Types
#

type AggregateBasketballProfile {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregateChatRoom {
  count: Int!
}

type AggregateGameProfile {
  count: Int!
}

type AggregateLolProfile {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregatePubgProfile {
  count: Int!
}

type AggregateSoccerProfile {
  count: Int!
}

type AggregateSportsProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BasketballProfileConnection {
  pageInfo: PageInfo!
  edges: [BasketballProfileEdge]!
  aggregate: AggregateBasketballProfile!
}

input BasketballProfileCreateInput {
  players: Int
  sportsProfile: SportsProfileCreateOneWithoutBasketballInput
}

input BasketballProfileCreateOneWithoutSportsProfileInput {
  create: BasketballProfileCreateWithoutSportsProfileInput
  connect: BasketballProfileWhereUniqueInput
}

input BasketballProfileCreateWithoutSportsProfileInput {
  players: Int
}

type BasketballProfileEdge {
  node: BasketballProfile!
  cursor: String!
}

enum BasketballProfileOrderByInput {
  id_ASC
  id_DESC
  players_ASC
  players_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BasketballProfilePreviousValues {
  id: ID!
  players: Int
}

type BasketballProfileSubscriptionPayload {
  mutation: MutationType!
  node: BasketballProfile
  updatedFields: [String!]
  previousValues: BasketballProfilePreviousValues
}

input BasketballProfileSubscriptionWhereInput {
  AND: [BasketballProfileSubscriptionWhereInput!]
  OR: [BasketballProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BasketballProfileWhereInput
}

input BasketballProfileUpdateInput {
  players: Int
  sportsProfile: SportsProfileUpdateOneWithoutBasketballInput
}

input BasketballProfileUpdateOneWithoutSportsProfileInput {
  create: BasketballProfileCreateWithoutSportsProfileInput
  connect: BasketballProfileWhereUniqueInput
  disconnect: BasketballProfileWhereUniqueInput
  delete: BasketballProfileWhereUniqueInput
  update: BasketballProfileUpdateWithoutSportsProfileInput
  upsert: BasketballProfileUpsertWithoutSportsProfileInput
}

input BasketballProfileUpdateWithoutSportsProfileDataInput {
  players: Int
}

input BasketballProfileUpdateWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput!
  data: BasketballProfileUpdateWithoutSportsProfileDataInput!
}

input BasketballProfileUpsertWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput!
  update: BasketballProfileUpdateWithoutSportsProfileDataInput!
  create: BasketballProfileCreateWithoutSportsProfileInput!
}

input BasketballProfileWhereInput {
  AND: [BasketballProfileWhereInput!]
  OR: [BasketballProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  players: Int
  players_not: Int
  players_in: [Int!]
  players_not_in: [Int!]
  players_lt: Int
  players_lte: Int
  players_gt: Int
  players_gte: Int
  sportsProfile: SportsProfileWhereInput
}

input BasketballProfileWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

enum Category {
  GAME
  SPORTS
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  text: String
  user: UserCreateOneWithoutChatsInput!
  chatRoom: ChatRoomCreateOneWithoutChatsInput!
}

input ChatCreateManyWithoutChatRoomInput {
  create: [ChatCreateWithoutChatRoomInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateManyWithoutUserInput {
  create: [ChatCreateWithoutUserInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateWithoutChatRoomInput {
  text: String
  user: UserCreateOneWithoutChatsInput!
}

input ChatCreateWithoutUserInput {
  text: String
  chatRoom: ChatRoomCreateOneWithoutChatsInput!
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String
}

type ChatRoomConnection {
  pageInfo: PageInfo!
  edges: [ChatRoomEdge]!
  aggregate: AggregateChatRoom!
}

input ChatRoomCreateInput {
  chats: ChatCreateManyWithoutChatRoomInput
  users: UserCreateManyWithoutChatRoomsInput
}

input ChatRoomCreateManyWithoutUsersInput {
  create: [ChatRoomCreateWithoutUsersInput!]
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateOneWithoutChatsInput {
  create: ChatRoomCreateWithoutChatsInput
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateWithoutChatsInput {
  users: UserCreateManyWithoutChatRoomsInput
}

input ChatRoomCreateWithoutUsersInput {
  chats: ChatCreateManyWithoutChatRoomInput
}

type ChatRoomEdge {
  node: ChatRoom!
  cursor: String!
}

enum ChatRoomOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatRoomPreviousValues {
  id: ID!
}

type ChatRoomSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoom
  updatedFields: [String!]
  previousValues: ChatRoomPreviousValues
}

input ChatRoomSubscriptionWhereInput {
  AND: [ChatRoomSubscriptionWhereInput!]
  OR: [ChatRoomSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatRoomWhereInput
}

input ChatRoomUpdateInput {
  chats: ChatUpdateManyWithoutChatRoomInput
  users: UserUpdateManyWithoutChatRoomsInput
}

input ChatRoomUpdateManyWithoutUsersInput {
  create: [ChatRoomCreateWithoutUsersInput!]
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
  delete: [ChatRoomWhereUniqueInput!]
  update: [ChatRoomUpdateWithoutUsersInput!]
  upsert: [ChatRoomUpsertWithoutUsersInput!]
}

input ChatRoomUpdateOneWithoutChatsInput {
  create: ChatRoomCreateWithoutChatsInput
  connect: ChatRoomWhereUniqueInput
  disconnect: ChatRoomWhereUniqueInput
  delete: ChatRoomWhereUniqueInput
  update: ChatRoomUpdateWithoutChatsInput
  upsert: ChatRoomUpsertWithoutChatsInput
}

input ChatRoomUpdateWithoutChatsDataInput {
  users: UserUpdateManyWithoutChatRoomsInput
}

input ChatRoomUpdateWithoutChatsInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutChatsDataInput!
}

input ChatRoomUpdateWithoutUsersDataInput {
  chats: ChatUpdateManyWithoutChatRoomInput
}

input ChatRoomUpdateWithoutUsersInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutUsersDataInput!
}

input ChatRoomUpsertWithoutChatsInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutChatsDataInput!
  create: ChatRoomCreateWithoutChatsInput!
}

input ChatRoomUpsertWithoutUsersInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutUsersDataInput!
  create: ChatRoomCreateWithoutUsersInput!
}

input ChatRoomWhereInput {
  AND: [ChatRoomWhereInput!]
  OR: [ChatRoomWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input ChatRoomWhereUniqueInput {
  id: ID
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  AND: [ChatSubscriptionWhereInput!]
  OR: [ChatSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

input ChatUpdateInput {
  text: String
  user: UserUpdateOneWithoutChatsInput
  chatRoom: ChatRoomUpdateOneWithoutChatsInput
}

input ChatUpdateManyWithoutChatRoomInput {
  create: [ChatCreateWithoutChatRoomInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithoutChatRoomInput!]
  upsert: [ChatUpsertWithoutChatRoomInput!]
}

input ChatUpdateManyWithoutUserInput {
  create: [ChatCreateWithoutUserInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithoutUserInput!]
  upsert: [ChatUpsertWithoutUserInput!]
}

input ChatUpdateWithoutChatRoomDataInput {
  text: String
  user: UserUpdateOneWithoutChatsInput
}

input ChatUpdateWithoutChatRoomInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutChatRoomDataInput!
}

input ChatUpdateWithoutUserDataInput {
  text: String
  chatRoom: ChatRoomUpdateOneWithoutChatsInput
}

input ChatUpdateWithoutUserInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutUserDataInput!
}

input ChatUpsertWithoutChatRoomInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutChatRoomDataInput!
  create: ChatCreateWithoutChatRoomInput!
}

input ChatUpsertWithoutUserInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutUserDataInput!
  create: ChatCreateWithoutUserInput!
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  chatRoom: ChatRoomWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

enum GameCategory {
  PUBG
  LOL
}

type GameProfileConnection {
  pageInfo: PageInfo!
  edges: [GameProfileEdge]!
  aggregate: AggregateGameProfile!
}

input GameProfileCreateInput {
  gameCategory: GameCategory
  pubg: PubgProfileCreateOneWithoutGameProfileInput
  lol: LolProfileCreateOneWithoutGameProfileInput
}

input GameProfileCreateOneInput {
  create: GameProfileCreateInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateOneWithoutLolInput {
  create: GameProfileCreateWithoutLolInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateOneWithoutPubgInput {
  create: GameProfileCreateWithoutPubgInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateWithoutLolInput {
  gameCategory: GameCategory
  pubg: PubgProfileCreateOneWithoutGameProfileInput
}

input GameProfileCreateWithoutPubgInput {
  gameCategory: GameCategory
  lol: LolProfileCreateOneWithoutGameProfileInput
}

type GameProfileEdge {
  node: GameProfile!
  cursor: String!
}

enum GameProfileOrderByInput {
  id_ASC
  id_DESC
  gameCategory_ASC
  gameCategory_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GameProfilePreviousValues {
  id: ID!
  gameCategory: GameCategory
}

type GameProfileSubscriptionPayload {
  mutation: MutationType!
  node: GameProfile
  updatedFields: [String!]
  previousValues: GameProfilePreviousValues
}

input GameProfileSubscriptionWhereInput {
  AND: [GameProfileSubscriptionWhereInput!]
  OR: [GameProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameProfileWhereInput
}

input GameProfileUpdateInput {
  gameCategory: GameCategory
  pubg: PubgProfileUpdateOneWithoutGameProfileInput
  lol: LolProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateOneInput {
  create: GameProfileCreateInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
}

input GameProfileUpdateOneWithoutLolInput {
  create: GameProfileCreateWithoutLolInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutLolInput
  upsert: GameProfileUpsertWithoutLolInput
}

input GameProfileUpdateOneWithoutPubgInput {
  create: GameProfileCreateWithoutPubgInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutPubgInput
  upsert: GameProfileUpsertWithoutPubgInput
}

input GameProfileUpdateWithoutLolDataInput {
  gameCategory: GameCategory
  pubg: PubgProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateWithoutLolInput {
  where: GameProfileWhereUniqueInput!
  data: GameProfileUpdateWithoutLolDataInput!
}

input GameProfileUpdateWithoutPubgDataInput {
  gameCategory: GameCategory
  lol: LolProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateWithoutPubgInput {
  where: GameProfileWhereUniqueInput!
  data: GameProfileUpdateWithoutPubgDataInput!
}

input GameProfileUpsertWithoutLolInput {
  where: GameProfileWhereUniqueInput!
  update: GameProfileUpdateWithoutLolDataInput!
  create: GameProfileCreateWithoutLolInput!
}

input GameProfileUpsertWithoutPubgInput {
  where: GameProfileWhereUniqueInput!
  update: GameProfileUpdateWithoutPubgDataInput!
  create: GameProfileCreateWithoutPubgInput!
}

input GameProfileWhereInput {
  AND: [GameProfileWhereInput!]
  OR: [GameProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gameCategory: GameCategory
  gameCategory_not: GameCategory
  gameCategory_in: [GameCategory!]
  gameCategory_not_in: [GameCategory!]
  pubg: PubgProfileWhereInput
  lol: LolProfileWhereInput
}

input GameProfileWhereUniqueInput {
  id: ID
}

enum LolMode {
  DUO_RANK
  FLEX_RANK
  NORMAL
}

type LolProfileConnection {
  pageInfo: PageInfo!
  edges: [LolProfileEdge]!
  aggregate: AggregateLolProfile!
}

input LolProfileCreateInput {
  mode: LolMode
  role: LolRole
  gameProfile: GameProfileCreateOneWithoutLolInput
}

input LolProfileCreateOneWithoutGameProfileInput {
  create: LolProfileCreateWithoutGameProfileInput
  connect: LolProfileWhereUniqueInput
}

input LolProfileCreateWithoutGameProfileInput {
  mode: LolMode
  role: LolRole
}

type LolProfileEdge {
  node: LolProfile!
  cursor: String!
}

enum LolProfileOrderByInput {
  id_ASC
  id_DESC
  mode_ASC
  mode_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LolProfilePreviousValues {
  id: ID!
  mode: LolMode
  role: LolRole
}

type LolProfileSubscriptionPayload {
  mutation: MutationType!
  node: LolProfile
  updatedFields: [String!]
  previousValues: LolProfilePreviousValues
}

input LolProfileSubscriptionWhereInput {
  AND: [LolProfileSubscriptionWhereInput!]
  OR: [LolProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LolProfileWhereInput
}

input LolProfileUpdateInput {
  mode: LolMode
  role: LolRole
  gameProfile: GameProfileUpdateOneWithoutLolInput
}

input LolProfileUpdateOneWithoutGameProfileInput {
  create: LolProfileCreateWithoutGameProfileInput
  connect: LolProfileWhereUniqueInput
  disconnect: LolProfileWhereUniqueInput
  delete: LolProfileWhereUniqueInput
  update: LolProfileUpdateWithoutGameProfileInput
  upsert: LolProfileUpsertWithoutGameProfileInput
}

input LolProfileUpdateWithoutGameProfileDataInput {
  mode: LolMode
  role: LolRole
}

input LolProfileUpdateWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput!
  data: LolProfileUpdateWithoutGameProfileDataInput!
}

input LolProfileUpsertWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput!
  update: LolProfileUpdateWithoutGameProfileDataInput!
  create: LolProfileCreateWithoutGameProfileInput!
}

input LolProfileWhereInput {
  AND: [LolProfileWhereInput!]
  OR: [LolProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mode: LolMode
  mode_not: LolMode
  mode_in: [LolMode!]
  mode_not_in: [LolMode!]
  role: LolRole
  role_not: LolRole
  role_in: [LolRole!]
  role_not_in: [LolRole!]
  gameProfile: GameProfileWhereInput
}

input LolProfileWhereUniqueInput {
  id: ID
}

enum LolRole {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProfile(data: ProfileCreateInput!): Profile!
  createGameProfile(data: GameProfileCreateInput!): GameProfile!
  createPubgProfile(data: PubgProfileCreateInput!): PubgProfile!
  createLolProfile(data: LolProfileCreateInput!): LolProfile!
  createSportsProfile(data: SportsProfileCreateInput!): SportsProfile!
  createSoccerProfile(data: SoccerProfileCreateInput!): SoccerProfile!
  createBasketballProfile(data: BasketballProfileCreateInput!): BasketballProfile!
  createChatRoom(data: ChatRoomCreateInput!): ChatRoom!
  createChat(data: ChatCreateInput!): Chat!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateGameProfile(data: GameProfileUpdateInput!, where: GameProfileWhereUniqueInput!): GameProfile
  updatePubgProfile(data: PubgProfileUpdateInput!, where: PubgProfileWhereUniqueInput!): PubgProfile
  updateLolProfile(data: LolProfileUpdateInput!, where: LolProfileWhereUniqueInput!): LolProfile
  updateSportsProfile(data: SportsProfileUpdateInput!, where: SportsProfileWhereUniqueInput!): SportsProfile
  updateSoccerProfile(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereUniqueInput!): SoccerProfile
  updateBasketballProfile(data: BasketballProfileUpdateInput!, where: BasketballProfileWhereUniqueInput!): BasketballProfile
  updateChatRoom(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoom
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteGameProfile(where: GameProfileWhereUniqueInput!): GameProfile
  deletePubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  deleteLolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  deleteSportsProfile(where: SportsProfileWhereUniqueInput!): SportsProfile
  deleteSoccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  deleteBasketballProfile(where: BasketballProfileWhereUniqueInput!): BasketballProfile
  deleteChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  deleteChat(where: ChatWhereUniqueInput!): Chat
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertGameProfile(where: GameProfileWhereUniqueInput!, create: GameProfileCreateInput!, update: GameProfileUpdateInput!): GameProfile!
  upsertPubgProfile(where: PubgProfileWhereUniqueInput!, create: PubgProfileCreateInput!, update: PubgProfileUpdateInput!): PubgProfile!
  upsertLolProfile(where: LolProfileWhereUniqueInput!, create: LolProfileCreateInput!, update: LolProfileUpdateInput!): LolProfile!
  upsertSportsProfile(where: SportsProfileWhereUniqueInput!, create: SportsProfileCreateInput!, update: SportsProfileUpdateInput!): SportsProfile!
  upsertSoccerProfile(where: SoccerProfileWhereUniqueInput!, create: SoccerProfileCreateInput!, update: SoccerProfileUpdateInput!): SoccerProfile!
  upsertBasketballProfile(where: BasketballProfileWhereUniqueInput!, create: BasketballProfileCreateInput!, update: BasketballProfileUpdateInput!): BasketballProfile!
  upsertChatRoom(where: ChatRoomWhereUniqueInput!, create: ChatRoomCreateInput!, update: ChatRoomUpdateInput!): ChatRoom!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyProfiles(data: ProfileUpdateInput!, where: ProfileWhereInput!): BatchPayload!
  updateManyGameProfiles(data: GameProfileUpdateInput!, where: GameProfileWhereInput!): BatchPayload!
  updateManyPubgProfiles(data: PubgProfileUpdateInput!, where: PubgProfileWhereInput!): BatchPayload!
  updateManyLolProfiles(data: LolProfileUpdateInput!, where: LolProfileWhereInput!): BatchPayload!
  updateManySportsProfiles(data: SportsProfileUpdateInput!, where: SportsProfileWhereInput!): BatchPayload!
  updateManySoccerProfiles(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereInput!): BatchPayload!
  updateManyBasketballProfiles(data: BasketballProfileUpdateInput!, where: BasketballProfileWhereInput!): BatchPayload!
  updateManyChatRooms(data: ChatRoomUpdateInput!, where: ChatRoomWhereInput!): BatchPayload!
  updateManyChats(data: ChatUpdateInput!, where: ChatWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput!): BatchPayload!
  deleteManyGameProfiles(where: GameProfileWhereInput!): BatchPayload!
  deleteManyPubgProfiles(where: PubgProfileWhereInput!): BatchPayload!
  deleteManyLolProfiles(where: LolProfileWhereInput!): BatchPayload!
  deleteManySportsProfiles(where: SportsProfileWhereInput!): BatchPayload!
  deleteManySoccerProfiles(where: SoccerProfileWhereInput!): BatchPayload!
  deleteManyBasketballProfiles(where: BasketballProfileWhereInput!): BatchPayload!
  deleteManyChatRooms(where: ChatRoomWhereInput!): BatchPayload!
  deleteManyChats(where: ChatWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  category: Category
  gameProfile: GameProfileCreateOneInput
  sportsProfile: SportsProfileCreateOneInput
  user: UserCreateOneWithoutProfilesInput
}

input ProfileCreateManyWithoutUserInput {
  create: [ProfileCreateWithoutUserInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateWithoutUserInput {
  category: Category
  gameProfile: GameProfileCreateOneInput
  sportsProfile: SportsProfileCreateOneInput
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  category: Category
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  category: Category
  gameProfile: GameProfileUpdateOneInput
  sportsProfile: SportsProfileUpdateOneInput
  user: UserUpdateOneWithoutProfilesInput
}

input ProfileUpdateManyWithoutUserInput {
  create: [ProfileCreateWithoutUserInput!]
  connect: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithoutUserInput!]
  upsert: [ProfileUpsertWithoutUserInput!]
}

input ProfileUpdateWithoutUserDataInput {
  category: Category
  gameProfile: GameProfileUpdateOneInput
  sportsProfile: SportsProfileUpdateOneInput
}

input ProfileUpdateWithoutUserInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutUserDataInput!
}

input ProfileUpsertWithoutUserInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  category: Category
  category_not: Category
  category_in: [Category!]
  category_not_in: [Category!]
  gameProfile: GameProfileWhereInput
  sportsProfile: SportsProfileWhereInput
  user: UserWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
}

enum PubgMode {
  SQUAD
  DUO
}

type PubgProfileConnection {
  pageInfo: PageInfo!
  edges: [PubgProfileEdge]!
  aggregate: AggregatePubgProfile!
}

input PubgProfileCreateInput {
  mode: PubgMode
  server: PubgServer
  gameProfile: GameProfileCreateOneWithoutPubgInput
}

input PubgProfileCreateOneWithoutGameProfileInput {
  create: PubgProfileCreateWithoutGameProfileInput
  connect: PubgProfileWhereUniqueInput
}

input PubgProfileCreateWithoutGameProfileInput {
  mode: PubgMode
  server: PubgServer
}

type PubgProfileEdge {
  node: PubgProfile!
  cursor: String!
}

enum PubgProfileOrderByInput {
  id_ASC
  id_DESC
  mode_ASC
  mode_DESC
  server_ASC
  server_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PubgProfilePreviousValues {
  id: ID!
  mode: PubgMode
  server: PubgServer
}

type PubgProfileSubscriptionPayload {
  mutation: MutationType!
  node: PubgProfile
  updatedFields: [String!]
  previousValues: PubgProfilePreviousValues
}

input PubgProfileSubscriptionWhereInput {
  AND: [PubgProfileSubscriptionWhereInput!]
  OR: [PubgProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PubgProfileWhereInput
}

input PubgProfileUpdateInput {
  mode: PubgMode
  server: PubgServer
  gameProfile: GameProfileUpdateOneWithoutPubgInput
}

input PubgProfileUpdateOneWithoutGameProfileInput {
  create: PubgProfileCreateWithoutGameProfileInput
  connect: PubgProfileWhereUniqueInput
  disconnect: PubgProfileWhereUniqueInput
  delete: PubgProfileWhereUniqueInput
  update: PubgProfileUpdateWithoutGameProfileInput
  upsert: PubgProfileUpsertWithoutGameProfileInput
}

input PubgProfileUpdateWithoutGameProfileDataInput {
  mode: PubgMode
  server: PubgServer
}

input PubgProfileUpdateWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput!
  data: PubgProfileUpdateWithoutGameProfileDataInput!
}

input PubgProfileUpsertWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput!
  update: PubgProfileUpdateWithoutGameProfileDataInput!
  create: PubgProfileCreateWithoutGameProfileInput!
}

input PubgProfileWhereInput {
  AND: [PubgProfileWhereInput!]
  OR: [PubgProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mode: PubgMode
  mode_not: PubgMode
  mode_in: [PubgMode!]
  mode_not_in: [PubgMode!]
  server: PubgServer
  server_not: PubgServer
  server_in: [PubgServer!]
  server_not_in: [PubgServer!]
  gameProfile: GameProfileWhereInput
}

input PubgProfileWhereUniqueInput {
  id: ID
}

enum PubgServer {
  KAKAO
  ASIA
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  gameProfiles(where: GameProfileWhereInput, orderBy: GameProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameProfile]!
  pubgProfiles(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PubgProfile]!
  lolProfiles(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LolProfile]!
  sportsProfiles(where: SportsProfileWhereInput, orderBy: SportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SportsProfile]!
  soccerProfiles(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SoccerProfile]!
  basketballProfiles(where: BasketballProfileWhereInput, orderBy: BasketballProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasketballProfile]!
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  user(where: UserWhereUniqueInput!): User
  profile(where: ProfileWhereUniqueInput!): Profile
  gameProfile(where: GameProfileWhereUniqueInput!): GameProfile
  pubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  lolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  sportsProfile(where: SportsProfileWhereUniqueInput!): SportsProfile
  soccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  basketballProfile(where: BasketballProfileWhereUniqueInput!): BasketballProfile
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  chat(where: ChatWhereUniqueInput!): Chat
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  gameProfilesConnection(where: GameProfileWhereInput, orderBy: GameProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameProfileConnection!
  pubgProfilesConnection(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PubgProfileConnection!
  lolProfilesConnection(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LolProfileConnection!
  sportsProfilesConnection(where: SportsProfileWhereInput, orderBy: SportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SportsProfileConnection!
  soccerProfilesConnection(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SoccerProfileConnection!
  basketballProfilesConnection(where: BasketballProfileWhereInput, orderBy: BasketballProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BasketballProfileConnection!
  chatRoomsConnection(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  node(id: ID!): Node
}

type SoccerProfileConnection {
  pageInfo: PageInfo!
  edges: [SoccerProfileEdge]!
  aggregate: AggregateSoccerProfile!
}

input SoccerProfileCreateInput {
  players: Int
  sportsProfile: SportsProfileCreateOneWithoutSoccerInput
}

input SoccerProfileCreateOneWithoutSportsProfileInput {
  create: SoccerProfileCreateWithoutSportsProfileInput
  connect: SoccerProfileWhereUniqueInput
}

input SoccerProfileCreateWithoutSportsProfileInput {
  players: Int
}

type SoccerProfileEdge {
  node: SoccerProfile!
  cursor: String!
}

enum SoccerProfileOrderByInput {
  id_ASC
  id_DESC
  players_ASC
  players_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SoccerProfilePreviousValues {
  id: ID!
  players: Int
}

type SoccerProfileSubscriptionPayload {
  mutation: MutationType!
  node: SoccerProfile
  updatedFields: [String!]
  previousValues: SoccerProfilePreviousValues
}

input SoccerProfileSubscriptionWhereInput {
  AND: [SoccerProfileSubscriptionWhereInput!]
  OR: [SoccerProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SoccerProfileWhereInput
}

input SoccerProfileUpdateInput {
  players: Int
  sportsProfile: SportsProfileUpdateOneWithoutSoccerInput
}

input SoccerProfileUpdateOneWithoutSportsProfileInput {
  create: SoccerProfileCreateWithoutSportsProfileInput
  connect: SoccerProfileWhereUniqueInput
  disconnect: SoccerProfileWhereUniqueInput
  delete: SoccerProfileWhereUniqueInput
  update: SoccerProfileUpdateWithoutSportsProfileInput
  upsert: SoccerProfileUpsertWithoutSportsProfileInput
}

input SoccerProfileUpdateWithoutSportsProfileDataInput {
  players: Int
}

input SoccerProfileUpdateWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput!
  data: SoccerProfileUpdateWithoutSportsProfileDataInput!
}

input SoccerProfileUpsertWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput!
  update: SoccerProfileUpdateWithoutSportsProfileDataInput!
  create: SoccerProfileCreateWithoutSportsProfileInput!
}

input SoccerProfileWhereInput {
  AND: [SoccerProfileWhereInput!]
  OR: [SoccerProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  players: Int
  players_not: Int
  players_in: [Int!]
  players_not_in: [Int!]
  players_lt: Int
  players_lte: Int
  players_gt: Int
  players_gte: Int
  sportsProfile: SportsProfileWhereInput
}

input SoccerProfileWhereUniqueInput {
  id: ID
}

enum SportsCategory {
  SOCCER
  BASKETBALL
}

type SportsProfileConnection {
  pageInfo: PageInfo!
  edges: [SportsProfileEdge]!
  aggregate: AggregateSportsProfile!
}

input SportsProfileCreateInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileCreateOneWithoutSportsProfileInput
  basketball: BasketballProfileCreateOneWithoutSportsProfileInput
}

input SportsProfileCreateOneInput {
  create: SportsProfileCreateInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateOneWithoutBasketballInput {
  create: SportsProfileCreateWithoutBasketballInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateOneWithoutSoccerInput {
  create: SportsProfileCreateWithoutSoccerInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateWithoutBasketballInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileCreateOneWithoutSportsProfileInput
}

input SportsProfileCreateWithoutSoccerInput {
  sportsCategory: SportsCategory
  basketball: BasketballProfileCreateOneWithoutSportsProfileInput
}

type SportsProfileEdge {
  node: SportsProfile!
  cursor: String!
}

enum SportsProfileOrderByInput {
  id_ASC
  id_DESC
  sportsCategory_ASC
  sportsCategory_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SportsProfilePreviousValues {
  id: ID!
  sportsCategory: SportsCategory
}

type SportsProfileSubscriptionPayload {
  mutation: MutationType!
  node: SportsProfile
  updatedFields: [String!]
  previousValues: SportsProfilePreviousValues
}

input SportsProfileSubscriptionWhereInput {
  AND: [SportsProfileSubscriptionWhereInput!]
  OR: [SportsProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SportsProfileWhereInput
}

input SportsProfileUpdateInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileUpdateOneWithoutSportsProfileInput
  basketball: BasketballProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateOneInput {
  create: SportsProfileCreateInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
}

input SportsProfileUpdateOneWithoutBasketballInput {
  create: SportsProfileCreateWithoutBasketballInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutBasketballInput
  upsert: SportsProfileUpsertWithoutBasketballInput
}

input SportsProfileUpdateOneWithoutSoccerInput {
  create: SportsProfileCreateWithoutSoccerInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutSoccerInput
  upsert: SportsProfileUpsertWithoutSoccerInput
}

input SportsProfileUpdateWithoutBasketballDataInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput!
  data: SportsProfileUpdateWithoutBasketballDataInput!
}

input SportsProfileUpdateWithoutSoccerDataInput {
  sportsCategory: SportsCategory
  basketball: BasketballProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput!
  data: SportsProfileUpdateWithoutSoccerDataInput!
}

input SportsProfileUpsertWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput!
  update: SportsProfileUpdateWithoutBasketballDataInput!
  create: SportsProfileCreateWithoutBasketballInput!
}

input SportsProfileUpsertWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput!
  update: SportsProfileUpdateWithoutSoccerDataInput!
  create: SportsProfileCreateWithoutSoccerInput!
}

input SportsProfileWhereInput {
  AND: [SportsProfileWhereInput!]
  OR: [SportsProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sportsCategory: SportsCategory
  sportsCategory_not: SportsCategory
  sportsCategory_in: [SportsCategory!]
  sportsCategory_not_in: [SportsCategory!]
  soccer: SoccerProfileWhereInput
  basketball: BasketballProfileWhereInput
}

input SportsProfileWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  gameProfile(where: GameProfileSubscriptionWhereInput): GameProfileSubscriptionPayload
  pubgProfile(where: PubgProfileSubscriptionWhereInput): PubgProfileSubscriptionPayload
  lolProfile(where: LolProfileSubscriptionWhereInput): LolProfileSubscriptionPayload
  sportsProfile(where: SportsProfileSubscriptionWhereInput): SportsProfileSubscriptionPayload
  soccerProfile(where: SoccerProfileSubscriptionWhereInput): SoccerProfileSubscriptionPayload
  basketballProfile(where: BasketballProfileSubscriptionWhereInput): BasketballProfileSubscriptionPayload
  chatRoom(where: ChatRoomSubscriptionWhereInput): ChatRoomSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chatRooms: ChatRoomCreateManyWithoutUsersInput
  chats: ChatCreateManyWithoutUserInput
}

input UserCreateManyWithoutChatRoomsInput {
  create: [UserCreateWithoutChatRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutChatsInput {
  create: UserCreateWithoutChatsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatRoomsInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chats: ChatCreateManyWithoutUserInput
}

input UserCreateWithoutChatsInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chatRooms: ChatRoomCreateManyWithoutUsersInput
}

input UserCreateWithoutProfilesInput {
  facebookUserId: String
  googleUserId: String
  chatRooms: ChatRoomCreateManyWithoutUsersInput
  chats: ChatCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  googleUserId_ASC
  googleUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String
  googleUserId: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutChatRoomsInput {
  create: [UserCreateWithoutChatRoomsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutChatRoomsInput!]
  upsert: [UserUpsertWithoutChatRoomsInput!]
}

input UserUpdateOneWithoutChatsInput {
  create: UserCreateWithoutChatsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutChatsInput
  upsert: UserUpsertWithoutChatsInput
}

input UserUpdateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutProfilesInput
  upsert: UserUpsertWithoutProfilesInput
}

input UserUpdateWithoutChatRoomsDataInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateWithoutChatRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatRoomsDataInput!
}

input UserUpdateWithoutChatsDataInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
}

input UserUpdateWithoutChatsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatsDataInput!
}

input UserUpdateWithoutProfilesDataInput {
  facebookUserId: String
  googleUserId: String
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateWithoutProfilesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProfilesDataInput!
}

input UserUpsertWithoutChatRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatRoomsDataInput!
  create: UserCreateWithoutChatRoomsInput!
}

input UserUpsertWithoutChatsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatsDataInput!
  create: UserCreateWithoutChatsInput!
}

input UserUpsertWithoutProfilesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProfilesDataInput!
  create: UserCreateWithoutProfilesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  facebookUserId: String
  facebookUserId_not: String
  facebookUserId_in: [String!]
  facebookUserId_not_in: [String!]
  facebookUserId_lt: String
  facebookUserId_lte: String
  facebookUserId_gt: String
  facebookUserId_gte: String
  facebookUserId_contains: String
  facebookUserId_not_contains: String
  facebookUserId_starts_with: String
  facebookUserId_not_starts_with: String
  facebookUserId_ends_with: String
  facebookUserId_not_ends_with: String
  googleUserId: String
  googleUserId_not: String
  googleUserId_in: [String!]
  googleUserId_not_in: [String!]
  googleUserId_lt: String
  googleUserId_lte: String
  googleUserId_gt: String
  googleUserId_gte: String
  googleUserId_contains: String
  googleUserId_not_contains: String
  googleUserId_starts_with: String
  googleUserId_not_starts_with: String
  googleUserId_ends_with: String
  googleUserId_not_ends_with: String
  profiles_every: ProfileWhereInput
  profiles_some: ProfileWhereInput
  profiles_none: ProfileWhereInput
  chatRooms_every: ChatRoomWhereInput
  chatRooms_some: ChatRoomWhereInput
  chatRooms_none: ChatRoomWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
  googleUserId: String
}
`

export type LolProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'mode_ASC' |
  'mode_DESC' |
  'role_ASC' |
  'role_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'facebookUserId_ASC' |
  'facebookUserId_DESC' |
  'googleUserId_ASC' |
  'googleUserId_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type LolMode = 
  'DUO_RANK' |
  'FLEX_RANK' |
  'NORMAL'

export type BasketballProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'players_ASC' |
  'players_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type LolRole = 
  'TOP' |
  'JUNGLE' |
  'MID' |
  'ADC' |
  'SUPPORT'

export type SoccerProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'players_ASC' |
  'players_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PubgProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'mode_ASC' |
  'mode_DESC' |
  'server_ASC' |
  'server_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type SportsProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'sportsCategory_ASC' |
  'sportsCategory_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type SportsCategory = 
  'SOCCER' |
  'BASKETBALL'

export type PubgServer = 
  'KAKAO' |
  'ASIA'

export type ProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'category_ASC' |
  'category_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ChatRoomOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ChatOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'text_ASC' |
  'text_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type GameProfileOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'gameCategory_ASC' |
  'gameCategory_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export type PubgMode = 
  'SQUAD' |
  'DUO'

export type GameCategory = 
  'PUBG' |
  'LOL'

export type Category = 
  'GAME' |
  'SPORTS'

export interface GameProfileCreateOneWithoutLolInput {
  create?: GameProfileCreateWithoutLolInput
  connect?: GameProfileWhereUniqueInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  facebookUserId?: String
  facebookUserId_not?: String
  facebookUserId_in?: String[] | String
  facebookUserId_not_in?: String[] | String
  facebookUserId_lt?: String
  facebookUserId_lte?: String
  facebookUserId_gt?: String
  facebookUserId_gte?: String
  facebookUserId_contains?: String
  facebookUserId_not_contains?: String
  facebookUserId_starts_with?: String
  facebookUserId_not_starts_with?: String
  facebookUserId_ends_with?: String
  facebookUserId_not_ends_with?: String
  googleUserId?: String
  googleUserId_not?: String
  googleUserId_in?: String[] | String
  googleUserId_not_in?: String[] | String
  googleUserId_lt?: String
  googleUserId_lte?: String
  googleUserId_gt?: String
  googleUserId_gte?: String
  googleUserId_contains?: String
  googleUserId_not_contains?: String
  googleUserId_starts_with?: String
  googleUserId_not_starts_with?: String
  googleUserId_ends_with?: String
  googleUserId_not_ends_with?: String
  profiles_every?: ProfileWhereInput
  profiles_some?: ProfileWhereInput
  profiles_none?: ProfileWhereInput
  chatRooms_every?: ChatRoomWhereInput
  chatRooms_some?: ChatRoomWhereInput
  chatRooms_none?: ChatRoomWhereInput
  chats_every?: ChatWhereInput
  chats_some?: ChatWhereInput
  chats_none?: ChatWhereInput
}

export interface SoccerProfileCreateOneWithoutSportsProfileInput {
  create?: SoccerProfileCreateWithoutSportsProfileInput
  connect?: SoccerProfileWhereUniqueInput
}

export interface LolProfileUpdateOneWithoutGameProfileInput {
  create?: LolProfileCreateWithoutGameProfileInput
  connect?: LolProfileWhereUniqueInput
  disconnect?: LolProfileWhereUniqueInput
  delete?: LolProfileWhereUniqueInput
  update?: LolProfileUpdateWithoutGameProfileInput
  upsert?: LolProfileUpsertWithoutGameProfileInput
}

export interface SoccerProfileCreateWithoutSportsProfileInput {
  players?: Int
}

export interface UserUpdateInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileUpdateManyWithoutUserInput
  chatRooms?: ChatRoomUpdateManyWithoutUsersInput
  chats?: ChatUpdateManyWithoutUserInput
}

export interface BasketballProfileCreateOneWithoutSportsProfileInput {
  create?: BasketballProfileCreateWithoutSportsProfileInput
  connect?: BasketballProfileWhereUniqueInput
}

export interface ChatRoomSubscriptionWhereInput {
  AND?: ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  OR?: ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ChatRoomWhereInput
}

export interface BasketballProfileCreateWithoutSportsProfileInput {
  players?: Int
}

export interface SoccerProfileSubscriptionWhereInput {
  AND?: SoccerProfileSubscriptionWhereInput[] | SoccerProfileSubscriptionWhereInput
  OR?: SoccerProfileSubscriptionWhereInput[] | SoccerProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: SoccerProfileWhereInput
}

export interface ChatRoomCreateManyWithoutUsersInput {
  create?: ChatRoomCreateWithoutUsersInput[] | ChatRoomCreateWithoutUsersInput
  connect?: ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput
}

export interface LolProfileSubscriptionWhereInput {
  AND?: LolProfileSubscriptionWhereInput[] | LolProfileSubscriptionWhereInput
  OR?: LolProfileSubscriptionWhereInput[] | LolProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: LolProfileWhereInput
}

export interface ChatRoomCreateWithoutUsersInput {
  chats?: ChatCreateManyWithoutChatRoomInput
}

export interface GameProfileSubscriptionWhereInput {
  AND?: GameProfileSubscriptionWhereInput[] | GameProfileSubscriptionWhereInput
  OR?: GameProfileSubscriptionWhereInput[] | GameProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: GameProfileWhereInput
}

export interface ChatCreateManyWithoutChatRoomInput {
  create?: ChatCreateWithoutChatRoomInput[] | ChatCreateWithoutChatRoomInput
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
}

export interface ProfileSubscriptionWhereInput {
  AND?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput
  OR?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ProfileWhereInput
}

export interface ChatCreateWithoutChatRoomInput {
  text?: String
  user: UserCreateOneWithoutChatsInput
}

export interface ChatUpdateInput {
  text?: String
  user?: UserUpdateOneWithoutChatsInput
  chatRoom?: ChatRoomUpdateOneWithoutChatsInput
}

export interface UserCreateOneWithoutChatsInput {
  create?: UserCreateWithoutChatsInput
  connect?: UserWhereUniqueInput
}

export interface SportsProfileWhereInput {
  AND?: SportsProfileWhereInput[] | SportsProfileWhereInput
  OR?: SportsProfileWhereInput[] | SportsProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  sportsCategory?: SportsCategory
  sportsCategory_not?: SportsCategory
  sportsCategory_in?: SportsCategory[] | SportsCategory
  sportsCategory_not_in?: SportsCategory[] | SportsCategory
  soccer?: SoccerProfileWhereInput
  basketball?: BasketballProfileWhereInput
}

export interface UserCreateWithoutChatsInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileCreateManyWithoutUserInput
  chatRooms?: ChatRoomCreateManyWithoutUsersInput
}

export interface PubgProfileWhereInput {
  AND?: PubgProfileWhereInput[] | PubgProfileWhereInput
  OR?: PubgProfileWhereInput[] | PubgProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  mode?: PubgMode
  mode_not?: PubgMode
  mode_in?: PubgMode[] | PubgMode
  mode_not_in?: PubgMode[] | PubgMode
  server?: PubgServer
  server_not?: PubgServer
  server_in?: PubgServer[] | PubgServer
  server_not_in?: PubgServer[] | PubgServer
  gameProfile?: GameProfileWhereInput
}

export interface ChatCreateManyWithoutUserInput {
  create?: ChatCreateWithoutUserInput[] | ChatCreateWithoutUserInput
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
}

export interface ProfileWhereInput {
  AND?: ProfileWhereInput[] | ProfileWhereInput
  OR?: ProfileWhereInput[] | ProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  category?: Category
  category_not?: Category
  category_in?: Category[] | Category
  category_not_in?: Category[] | Category
  gameProfile?: GameProfileWhereInput
  sportsProfile?: SportsProfileWhereInput
  user?: UserWhereInput
}

export interface ChatCreateWithoutUserInput {
  text?: String
  chatRoom: ChatRoomCreateOneWithoutChatsInput
}

export interface ProfileWhereUniqueInput {
  id?: ID_Input
}

export interface ChatRoomCreateOneWithoutChatsInput {
  create?: ChatRoomCreateWithoutChatsInput
  connect?: ChatRoomWhereUniqueInput
}

export interface PubgProfileWhereUniqueInput {
  id?: ID_Input
}

export interface ChatRoomCreateWithoutChatsInput {
  users?: UserCreateManyWithoutChatRoomsInput
}

export interface SportsProfileWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateManyWithoutChatRoomsInput {
  create?: UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
}

export interface BasketballProfileWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateWithoutChatRoomsInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileCreateManyWithoutUserInput
  chats?: ChatCreateManyWithoutUserInput
}

export interface ChatWhereUniqueInput {
  id?: ID_Input
}

export interface ProfileCreateInput {
  category?: Category
  gameProfile?: GameProfileCreateOneInput
  sportsProfile?: SportsProfileCreateOneInput
  user?: UserCreateOneWithoutProfilesInput
}

export interface SportsProfileUpsertWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutBasketballDataInput
  create: SportsProfileCreateWithoutBasketballInput
}

export interface UserCreateOneWithoutProfilesInput {
  create?: UserCreateWithoutProfilesInput
  connect?: UserWhereUniqueInput
}

export interface SportsProfileUpdateWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput
  data: SportsProfileUpdateWithoutBasketballDataInput
}

export interface UserCreateWithoutProfilesInput {
  facebookUserId?: String
  googleUserId?: String
  chatRooms?: ChatRoomCreateManyWithoutUsersInput
  chats?: ChatCreateManyWithoutUserInput
}

export interface BasketballProfileUpdateInput {
  players?: Int
  sportsProfile?: SportsProfileUpdateOneWithoutBasketballInput
}

export interface PubgProfileCreateInput {
  mode?: PubgMode
  server?: PubgServer
  gameProfile?: GameProfileCreateOneWithoutPubgInput
}

export interface SportsProfileUpdateWithoutSoccerDataInput {
  sportsCategory?: SportsCategory
  basketball?: BasketballProfileUpdateOneWithoutSportsProfileInput
}

export interface GameProfileCreateOneWithoutPubgInput {
  create?: GameProfileCreateWithoutPubgInput
  connect?: GameProfileWhereUniqueInput
}

export interface SportsProfileUpdateOneWithoutSoccerInput {
  create?: SportsProfileCreateWithoutSoccerInput
  connect?: SportsProfileWhereUniqueInput
  disconnect?: SportsProfileWhereUniqueInput
  delete?: SportsProfileWhereUniqueInput
  update?: SportsProfileUpdateWithoutSoccerInput
  upsert?: SportsProfileUpsertWithoutSoccerInput
}

export interface GameProfileCreateWithoutPubgInput {
  gameCategory?: GameCategory
  lol?: LolProfileCreateOneWithoutGameProfileInput
}

export interface BasketballProfileUpsertWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput
  update: BasketballProfileUpdateWithoutSportsProfileDataInput
  create: BasketballProfileCreateWithoutSportsProfileInput
}

export interface LolProfileCreateInput {
  mode?: LolMode
  role?: LolRole
  gameProfile?: GameProfileCreateOneWithoutLolInput
}

export interface BasketballProfileUpdateWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput
  data: BasketballProfileUpdateWithoutSportsProfileDataInput
}

export interface LolProfileUpdateWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput
  data: LolProfileUpdateWithoutGameProfileDataInput
}

export interface SoccerProfileUpsertWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput
  update: SoccerProfileUpdateWithoutSportsProfileDataInput
  create: SoccerProfileCreateWithoutSportsProfileInput
}

export interface GameProfileCreateWithoutLolInput {
  gameCategory?: GameCategory
  pubg?: PubgProfileCreateOneWithoutGameProfileInput
}

export interface SoccerProfileUpdateWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput
  data: SoccerProfileUpdateWithoutSportsProfileDataInput
}

export interface SoccerProfileCreateInput {
  players?: Int
  sportsProfile?: SportsProfileCreateOneWithoutSoccerInput
}

export interface SportsProfileUpdateInput {
  sportsCategory?: SportsCategory
  soccer?: SoccerProfileUpdateOneWithoutSportsProfileInput
  basketball?: BasketballProfileUpdateOneWithoutSportsProfileInput
}

export interface SportsProfileCreateOneWithoutSoccerInput {
  create?: SportsProfileCreateWithoutSoccerInput
  connect?: SportsProfileWhereUniqueInput
}

export interface GameProfileUpdateWithoutLolDataInput {
  gameCategory?: GameCategory
  pubg?: PubgProfileUpdateOneWithoutGameProfileInput
}

export interface SportsProfileCreateWithoutSoccerInput {
  sportsCategory?: SportsCategory
  basketball?: BasketballProfileCreateOneWithoutSportsProfileInput
}

export interface GameProfileUpdateOneWithoutLolInput {
  create?: GameProfileCreateWithoutLolInput
  connect?: GameProfileWhereUniqueInput
  disconnect?: GameProfileWhereUniqueInput
  delete?: GameProfileWhereUniqueInput
  update?: GameProfileUpdateWithoutLolInput
  upsert?: GameProfileUpsertWithoutLolInput
}

export interface BasketballProfileCreateInput {
  players?: Int
  sportsProfile?: SportsProfileCreateOneWithoutBasketballInput
}

export interface GameProfileUpsertWithoutPubgInput {
  where: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutPubgDataInput
  create: GameProfileCreateWithoutPubgInput
}

export interface SportsProfileCreateOneWithoutBasketballInput {
  create?: SportsProfileCreateWithoutBasketballInput
  connect?: SportsProfileWhereUniqueInput
}

export interface GameProfileUpdateWithoutPubgInput {
  where: GameProfileWhereUniqueInput
  data: GameProfileUpdateWithoutPubgDataInput
}

export interface SportsProfileCreateWithoutBasketballInput {
  sportsCategory?: SportsCategory
  soccer?: SoccerProfileCreateOneWithoutSportsProfileInput
}

export interface PubgProfileUpdateInput {
  mode?: PubgMode
  server?: PubgServer
  gameProfile?: GameProfileUpdateOneWithoutPubgInput
}

export interface ChatRoomCreateInput {
  chats?: ChatCreateManyWithoutChatRoomInput
  users?: UserCreateManyWithoutChatRoomsInput
}

export interface LolProfileUpdateWithoutGameProfileDataInput {
  mode?: LolMode
  role?: LolRole
}

export interface ChatCreateInput {
  text?: String
  user: UserCreateOneWithoutChatsInput
  chatRoom: ChatRoomCreateOneWithoutChatsInput
}

export interface ProfileCreateManyWithoutUserInput {
  create?: ProfileCreateWithoutUserInput[] | ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput
}

export interface ChatWhereInput {
  AND?: ChatWhereInput[] | ChatWhereInput
  OR?: ChatWhereInput[] | ChatWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
  user?: UserWhereInput
  chatRoom?: ChatRoomWhereInput
}

export interface GameProfileCreateOneInput {
  create?: GameProfileCreateInput
  connect?: GameProfileWhereUniqueInput
}

export interface ProfileUpdateManyWithoutUserInput {
  create?: ProfileCreateWithoutUserInput[] | ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput
  update?: ProfileUpdateWithoutUserInput[] | ProfileUpdateWithoutUserInput
  upsert?: ProfileUpsertWithoutUserInput[] | ProfileUpsertWithoutUserInput
}

export interface PubgProfileCreateOneWithoutGameProfileInput {
  create?: PubgProfileCreateWithoutGameProfileInput
  connect?: PubgProfileWhereUniqueInput
}

export interface ProfileUpdateWithoutUserInput {
  where: ProfileWhereUniqueInput
  data: ProfileUpdateWithoutUserDataInput
}

export interface LolProfileCreateOneWithoutGameProfileInput {
  create?: LolProfileCreateWithoutGameProfileInput
  connect?: LolProfileWhereUniqueInput
}

export interface ProfileUpdateWithoutUserDataInput {
  category?: Category
  gameProfile?: GameProfileUpdateOneInput
  sportsProfile?: SportsProfileUpdateOneInput
}

export interface SportsProfileCreateOneInput {
  create?: SportsProfileCreateInput
  connect?: SportsProfileWhereUniqueInput
}

export interface GameProfileUpdateOneInput {
  create?: GameProfileCreateInput
  connect?: GameProfileWhereUniqueInput
  disconnect?: GameProfileWhereUniqueInput
  delete?: GameProfileWhereUniqueInput
}

export interface ChatSubscriptionWhereInput {
  AND?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput
  OR?: ChatSubscriptionWhereInput[] | ChatSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ChatWhereInput
}

export interface SportsProfileUpdateOneInput {
  create?: SportsProfileCreateInput
  connect?: SportsProfileWhereUniqueInput
  disconnect?: SportsProfileWhereUniqueInput
  delete?: SportsProfileWhereUniqueInput
}

export interface BasketballProfileSubscriptionWhereInput {
  AND?: BasketballProfileSubscriptionWhereInput[] | BasketballProfileSubscriptionWhereInput
  OR?: BasketballProfileSubscriptionWhereInput[] | BasketballProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: BasketballProfileWhereInput
}

export interface ProfileUpsertWithoutUserInput {
  where: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutUserDataInput
  create: ProfileCreateWithoutUserInput
}

export interface PubgProfileSubscriptionWhereInput {
  AND?: PubgProfileSubscriptionWhereInput[] | PubgProfileSubscriptionWhereInput
  OR?: PubgProfileSubscriptionWhereInput[] | PubgProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PubgProfileWhereInput
}

export interface ChatRoomUpdateManyWithoutUsersInput {
  create?: ChatRoomCreateWithoutUsersInput[] | ChatRoomCreateWithoutUsersInput
  connect?: ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput
  disconnect?: ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput
  delete?: ChatRoomWhereUniqueInput[] | ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateWithoutUsersInput[] | ChatRoomUpdateWithoutUsersInput
  upsert?: ChatRoomUpsertWithoutUsersInput[] | ChatRoomUpsertWithoutUsersInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface ChatRoomUpdateWithoutUsersInput {
  where: ChatRoomWhereUniqueInput
  data: ChatRoomUpdateWithoutUsersDataInput
}

export interface LolProfileWhereInput {
  AND?: LolProfileWhereInput[] | LolProfileWhereInput
  OR?: LolProfileWhereInput[] | LolProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  mode?: LolMode
  mode_not?: LolMode
  mode_in?: LolMode[] | LolMode
  mode_not_in?: LolMode[] | LolMode
  role?: LolRole
  role_not?: LolRole
  role_in?: LolRole[] | LolRole
  role_not_in?: LolRole[] | LolRole
  gameProfile?: GameProfileWhereInput
}

export interface ChatRoomUpdateWithoutUsersDataInput {
  chats?: ChatUpdateManyWithoutChatRoomInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  facebookUserId?: String
  googleUserId?: String
}

export interface ChatUpdateManyWithoutChatRoomInput {
  create?: ChatCreateWithoutChatRoomInput[] | ChatCreateWithoutChatRoomInput
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  disconnect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  delete?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  update?: ChatUpdateWithoutChatRoomInput[] | ChatUpdateWithoutChatRoomInput
  upsert?: ChatUpsertWithoutChatRoomInput[] | ChatUpsertWithoutChatRoomInput
}

export interface LolProfileWhereUniqueInput {
  id?: ID_Input
}

export interface ChatUpdateWithoutChatRoomInput {
  where: ChatWhereUniqueInput
  data: ChatUpdateWithoutChatRoomDataInput
}

export interface ChatRoomWhereUniqueInput {
  id?: ID_Input
}

export interface ChatUpdateWithoutChatRoomDataInput {
  text?: String
  user?: UserUpdateOneWithoutChatsInput
}

export interface SportsProfileUpdateWithoutBasketballDataInput {
  sportsCategory?: SportsCategory
  soccer?: SoccerProfileUpdateOneWithoutSportsProfileInput
}

export interface UserUpdateOneWithoutChatsInput {
  create?: UserCreateWithoutChatsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutChatsInput
  upsert?: UserUpsertWithoutChatsInput
}

export interface SportsProfileUpsertWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutSoccerDataInput
  create: SportsProfileCreateWithoutSoccerInput
}

export interface UserUpdateWithoutChatsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutChatsDataInput
}

export interface SoccerProfileUpdateInput {
  players?: Int
  sportsProfile?: SportsProfileUpdateOneWithoutSoccerInput
}

export interface UserUpdateWithoutChatsDataInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileUpdateManyWithoutUserInput
  chatRooms?: ChatRoomUpdateManyWithoutUsersInput
}

export interface BasketballProfileUpdateOneWithoutSportsProfileInput {
  create?: BasketballProfileCreateWithoutSportsProfileInput
  connect?: BasketballProfileWhereUniqueInput
  disconnect?: BasketballProfileWhereUniqueInput
  delete?: BasketballProfileWhereUniqueInput
  update?: BasketballProfileUpdateWithoutSportsProfileInput
  upsert?: BasketballProfileUpsertWithoutSportsProfileInput
}

export interface UserUpsertWithoutChatsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutChatsDataInput
  create: UserCreateWithoutChatsInput
}

export interface SoccerProfileUpdateOneWithoutSportsProfileInput {
  create?: SoccerProfileCreateWithoutSportsProfileInput
  connect?: SoccerProfileWhereUniqueInput
  disconnect?: SoccerProfileWhereUniqueInput
  delete?: SoccerProfileWhereUniqueInput
  update?: SoccerProfileUpdateWithoutSportsProfileInput
  upsert?: SoccerProfileUpsertWithoutSportsProfileInput
}

export interface ChatUpsertWithoutChatRoomInput {
  where: ChatWhereUniqueInput
  update: ChatUpdateWithoutChatRoomDataInput
  create: ChatCreateWithoutChatRoomInput
}

export interface GameProfileUpdateWithoutLolInput {
  where: GameProfileWhereUniqueInput
  data: GameProfileUpdateWithoutLolDataInput
}

export interface ChatRoomUpsertWithoutUsersInput {
  where: ChatRoomWhereUniqueInput
  update: ChatRoomUpdateWithoutUsersDataInput
  create: ChatRoomCreateWithoutUsersInput
}

export interface GameProfileUpdateWithoutPubgDataInput {
  gameCategory?: GameCategory
  lol?: LolProfileUpdateOneWithoutGameProfileInput
}

export interface ChatUpdateManyWithoutUserInput {
  create?: ChatCreateWithoutUserInput[] | ChatCreateWithoutUserInput
  connect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  disconnect?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  delete?: ChatWhereUniqueInput[] | ChatWhereUniqueInput
  update?: ChatUpdateWithoutUserInput[] | ChatUpdateWithoutUserInput
  upsert?: ChatUpsertWithoutUserInput[] | ChatUpsertWithoutUserInput
}

export interface LolProfileUpsertWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput
  update: LolProfileUpdateWithoutGameProfileDataInput
  create: LolProfileCreateWithoutGameProfileInput
}

export interface ChatUpdateWithoutUserInput {
  where: ChatWhereUniqueInput
  data: ChatUpdateWithoutUserDataInput
}

export interface ProfileCreateWithoutUserInput {
  category?: Category
  gameProfile?: GameProfileCreateOneInput
  sportsProfile?: SportsProfileCreateOneInput
}

export interface ChatUpdateWithoutUserDataInput {
  text?: String
  chatRoom?: ChatRoomUpdateOneWithoutChatsInput
}

export interface PubgProfileCreateWithoutGameProfileInput {
  mode?: PubgMode
  server?: PubgServer
}

export interface ChatRoomUpdateOneWithoutChatsInput {
  create?: ChatRoomCreateWithoutChatsInput
  connect?: ChatRoomWhereUniqueInput
  disconnect?: ChatRoomWhereUniqueInput
  delete?: ChatRoomWhereUniqueInput
  update?: ChatRoomUpdateWithoutChatsInput
  upsert?: ChatRoomUpsertWithoutChatsInput
}

export interface SportsProfileCreateInput {
  sportsCategory?: SportsCategory
  soccer?: SoccerProfileCreateOneWithoutSportsProfileInput
  basketball?: BasketballProfileCreateOneWithoutSportsProfileInput
}

export interface ChatRoomUpdateWithoutChatsInput {
  where: ChatRoomWhereUniqueInput
  data: ChatRoomUpdateWithoutChatsDataInput
}

export interface SportsProfileSubscriptionWhereInput {
  AND?: SportsProfileSubscriptionWhereInput[] | SportsProfileSubscriptionWhereInput
  OR?: SportsProfileSubscriptionWhereInput[] | SportsProfileSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: SportsProfileWhereInput
}

export interface ChatRoomUpdateWithoutChatsDataInput {
  users?: UserUpdateManyWithoutChatRoomsInput
}

export interface SoccerProfileWhereInput {
  AND?: SoccerProfileWhereInput[] | SoccerProfileWhereInput
  OR?: SoccerProfileWhereInput[] | SoccerProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  players?: Int
  players_not?: Int
  players_in?: Int[] | Int
  players_not_in?: Int[] | Int
  players_lt?: Int
  players_lte?: Int
  players_gt?: Int
  players_gte?: Int
  sportsProfile?: SportsProfileWhereInput
}

export interface UserUpdateManyWithoutChatRoomsInput {
  create?: UserCreateWithoutChatRoomsInput[] | UserCreateWithoutChatRoomsInput
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput
  update?: UserUpdateWithoutChatRoomsInput[] | UserUpdateWithoutChatRoomsInput
  upsert?: UserUpsertWithoutChatRoomsInput[] | UserUpsertWithoutChatRoomsInput
}

export interface GameProfileWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpdateWithoutChatRoomsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutChatRoomsDataInput
}

export interface ChatRoomUpdateInput {
  chats?: ChatUpdateManyWithoutChatRoomInput
  users?: UserUpdateManyWithoutChatRoomsInput
}

export interface UserUpdateWithoutChatRoomsDataInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileUpdateManyWithoutUserInput
  chats?: ChatUpdateManyWithoutUserInput
}

export interface SportsProfileUpdateWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput
  data: SportsProfileUpdateWithoutSoccerDataInput
}

export interface UserUpsertWithoutChatRoomsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutChatRoomsDataInput
  create: UserCreateWithoutChatRoomsInput
}

export interface SoccerProfileUpdateWithoutSportsProfileDataInput {
  players?: Int
}

export interface ChatRoomUpsertWithoutChatsInput {
  where: ChatRoomWhereUniqueInput
  update: ChatRoomUpdateWithoutChatsDataInput
  create: ChatRoomCreateWithoutChatsInput
}

export interface LolProfileUpdateInput {
  mode?: LolMode
  role?: LolRole
  gameProfile?: GameProfileUpdateOneWithoutLolInput
}

export interface ChatUpsertWithoutUserInput {
  where: ChatWhereUniqueInput
  update: ChatUpdateWithoutUserDataInput
  create: ChatCreateWithoutUserInput
}

export interface UserCreateInput {
  facebookUserId?: String
  googleUserId?: String
  profiles?: ProfileCreateManyWithoutUserInput
  chatRooms?: ChatRoomCreateManyWithoutUsersInput
  chats?: ChatCreateManyWithoutUserInput
}

export interface ProfileUpdateInput {
  category?: Category
  gameProfile?: GameProfileUpdateOneInput
  sportsProfile?: SportsProfileUpdateOneInput
  user?: UserUpdateOneWithoutProfilesInput
}

export interface LolProfileCreateWithoutGameProfileInput {
  mode?: LolMode
  role?: LolRole
}

export interface UserUpdateOneWithoutProfilesInput {
  create?: UserCreateWithoutProfilesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutProfilesInput
  upsert?: UserUpsertWithoutProfilesInput
}

export interface BasketballProfileWhereInput {
  AND?: BasketballProfileWhereInput[] | BasketballProfileWhereInput
  OR?: BasketballProfileWhereInput[] | BasketballProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  players?: Int
  players_not?: Int
  players_in?: Int[] | Int
  players_not_in?: Int[] | Int
  players_lt?: Int
  players_lte?: Int
  players_gt?: Int
  players_gte?: Int
  sportsProfile?: SportsProfileWhereInput
}

export interface UserUpdateWithoutProfilesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutProfilesDataInput
}

export interface SoccerProfileWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpdateWithoutProfilesDataInput {
  facebookUserId?: String
  googleUserId?: String
  chatRooms?: ChatRoomUpdateManyWithoutUsersInput
  chats?: ChatUpdateManyWithoutUserInput
}

export interface BasketballProfileUpdateWithoutSportsProfileDataInput {
  players?: Int
}

export interface UserUpsertWithoutProfilesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutProfilesDataInput
  create: UserCreateWithoutProfilesInput
}

export interface GameProfileUpdateOneWithoutPubgInput {
  create?: GameProfileCreateWithoutPubgInput
  connect?: GameProfileWhereUniqueInput
  disconnect?: GameProfileWhereUniqueInput
  delete?: GameProfileWhereUniqueInput
  update?: GameProfileUpdateWithoutPubgInput
  upsert?: GameProfileUpsertWithoutPubgInput
}

export interface GameProfileUpdateInput {
  gameCategory?: GameCategory
  pubg?: PubgProfileUpdateOneWithoutGameProfileInput
  lol?: LolProfileUpdateOneWithoutGameProfileInput
}

export interface ChatRoomWhereInput {
  AND?: ChatRoomWhereInput[] | ChatRoomWhereInput
  OR?: ChatRoomWhereInput[] | ChatRoomWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  chats_every?: ChatWhereInput
  chats_some?: ChatWhereInput
  chats_none?: ChatWhereInput
  users_every?: UserWhereInput
  users_some?: UserWhereInput
  users_none?: UserWhereInput
}

export interface PubgProfileUpsertWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput
  update: PubgProfileUpdateWithoutGameProfileDataInput
  create: PubgProfileCreateWithoutGameProfileInput
}

export interface PubgProfileUpdateWithoutGameProfileDataInput {
  mode?: PubgMode
  server?: PubgServer
}

export interface PubgProfileUpdateWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput
  data: PubgProfileUpdateWithoutGameProfileDataInput
}

export interface PubgProfileUpdateOneWithoutGameProfileInput {
  create?: PubgProfileCreateWithoutGameProfileInput
  connect?: PubgProfileWhereUniqueInput
  disconnect?: PubgProfileWhereUniqueInput
  delete?: PubgProfileWhereUniqueInput
  update?: PubgProfileUpdateWithoutGameProfileInput
  upsert?: PubgProfileUpsertWithoutGameProfileInput
}

export interface GameProfileWhereInput {
  AND?: GameProfileWhereInput[] | GameProfileWhereInput
  OR?: GameProfileWhereInput[] | GameProfileWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  gameCategory?: GameCategory
  gameCategory_not?: GameCategory
  gameCategory_in?: GameCategory[] | GameCategory
  gameCategory_not_in?: GameCategory[] | GameCategory
  pubg?: PubgProfileWhereInput
  lol?: LolProfileWhereInput
}

export interface GameProfileCreateInput {
  gameCategory?: GameCategory
  pubg?: PubgProfileCreateOneWithoutGameProfileInput
  lol?: LolProfileCreateOneWithoutGameProfileInput
}

export interface GameProfileUpsertWithoutLolInput {
  where: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutLolDataInput
  create: GameProfileCreateWithoutLolInput
}

export interface SportsProfileUpdateOneWithoutBasketballInput {
  create?: SportsProfileCreateWithoutBasketballInput
  connect?: SportsProfileWhereUniqueInput
  disconnect?: SportsProfileWhereUniqueInput
  delete?: SportsProfileWhereUniqueInput
  update?: SportsProfileUpdateWithoutBasketballInput
  upsert?: SportsProfileUpsertWithoutBasketballInput
}

export interface Node {
  id: ID_Output
}

export interface ChatPreviousValues {
  id: ID_Output
  createdAt: DateTime
  text?: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface Profile extends Node {
  id: ID_Output
  category?: Category
  gameProfile?: GameProfile
  sportsProfile?: SportsProfile
  user?: User
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface Chat extends Node {
  id: ID_Output
  createdAt: DateTime
  text?: String
  user: User
  chatRoom: ChatRoom
}

export interface AggregateChat {
  count: Int
}

export interface ChatConnection {
  pageInfo: PageInfo
  edges: ChatEdge[]
  aggregate: AggregateChat
}

export interface BatchPayload {
  count: Long
}

export interface ChatRoomEdge {
  node: ChatRoom
  cursor: String
}

export interface User extends Node {
  id: ID_Output
  facebookUserId?: String
  googleUserId?: String
  profiles?: Profile[]
  chatRooms?: ChatRoom[]
  chats?: Chat[]
}

export interface AggregateBasketballProfile {
  count: Int
}

export interface ChatRoomPreviousValues {
  id: ID_Output
}

export interface BasketballProfileConnection {
  pageInfo: PageInfo
  edges: BasketballProfileEdge[]
  aggregate: AggregateBasketballProfile
}

export interface ChatRoomSubscriptionPayload {
  mutation: MutationType
  node?: ChatRoom
  updatedFields?: String[]
  previousValues?: ChatRoomPreviousValues
}

export interface SoccerProfileEdge {
  node: SoccerProfile
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface AggregateSportsProfile {
  count: Int
}

export interface UserPreviousValues {
  id: ID_Output
  facebookUserId?: String
  googleUserId?: String
}

export interface SportsProfileConnection {
  pageInfo: PageInfo
  edges: SportsProfileEdge[]
  aggregate: AggregateSportsProfile
}

export interface ChatRoom extends Node {
  id: ID_Output
  chats?: Chat[]
  users?: User[]
}

export interface LolProfileEdge {
  node: LolProfile
  cursor: String
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType
  node?: Profile
  updatedFields?: String[]
  previousValues?: ProfilePreviousValues
}

export interface AggregatePubgProfile {
  count: Int
}

export interface ProfilePreviousValues {
  id: ID_Output
  category?: Category
}

export interface PubgProfileConnection {
  pageInfo: PageInfo
  edges: PubgProfileEdge[]
  aggregate: AggregatePubgProfile
}

export interface BasketballProfile extends Node {
  id: ID_Output
  players?: Int
  sportsProfile?: SportsProfile
}

export interface GameProfileEdge {
  node: GameProfile
  cursor: String
}

export interface GameProfileSubscriptionPayload {
  mutation: MutationType
  node?: GameProfile
  updatedFields?: String[]
  previousValues?: GameProfilePreviousValues
}

export interface AggregateProfile {
  count: Int
}

export interface GameProfilePreviousValues {
  id: ID_Output
  gameCategory?: GameCategory
}

export interface ProfileConnection {
  pageInfo: PageInfo
  edges: ProfileEdge[]
  aggregate: AggregateProfile
}

export interface SoccerProfile extends Node {
  id: ID_Output
  players?: Int
  sportsProfile?: SportsProfile
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface PubgProfileSubscriptionPayload {
  mutation: MutationType
  node?: PubgProfile
  updatedFields?: String[]
  previousValues?: PubgProfilePreviousValues
}

export interface ChatEdge {
  node: Chat
  cursor: String
}

export interface PubgProfilePreviousValues {
  id: ID_Output
  mode?: PubgMode
  server?: PubgServer
}

export interface ChatRoomConnection {
  pageInfo: PageInfo
  edges: ChatRoomEdge[]
  aggregate: AggregateChatRoom
}

export interface SportsProfile extends Node {
  id: ID_Output
  sportsCategory?: SportsCategory
  soccer?: SoccerProfile
  basketball?: BasketballProfile
}

export interface AggregateSoccerProfile {
  count: Int
}

export interface LolProfileSubscriptionPayload {
  mutation: MutationType
  node?: LolProfile
  updatedFields?: String[]
  previousValues?: LolProfilePreviousValues
}

export interface SportsProfileEdge {
  node: SportsProfile
  cursor: String
}

export interface LolProfilePreviousValues {
  id: ID_Output
  mode?: LolMode
  role?: LolRole
}

export interface LolProfileConnection {
  pageInfo: PageInfo
  edges: LolProfileEdge[]
  aggregate: AggregateLolProfile
}

export interface LolProfile extends Node {
  id: ID_Output
  gameProfile?: GameProfile
  mode?: LolMode
  role?: LolRole
}

export interface AggregateGameProfile {
  count: Int
}

export interface SportsProfileSubscriptionPayload {
  mutation: MutationType
  node?: SportsProfile
  updatedFields?: String[]
  previousValues?: SportsProfilePreviousValues
}

export interface ProfileEdge {
  node: Profile
  cursor: String
}

export interface SportsProfilePreviousValues {
  id: ID_Output
  sportsCategory?: SportsCategory
}

export interface ChatSubscriptionPayload {
  mutation: MutationType
  node?: Chat
  updatedFields?: String[]
  previousValues?: ChatPreviousValues
}

export interface PubgProfile extends Node {
  id: ID_Output
  gameProfile?: GameProfile
  mode?: PubgMode
  server?: PubgServer
}

export interface BasketballProfileEdge {
  node: BasketballProfile
  cursor: String
}

export interface SoccerProfileSubscriptionPayload {
  mutation: MutationType
  node?: SoccerProfile
  updatedFields?: String[]
  previousValues?: SoccerProfilePreviousValues
}

export interface AggregateLolProfile {
  count: Int
}

export interface GameProfileConnection {
  pageInfo: PageInfo
  edges: GameProfileEdge[]
  aggregate: AggregateGameProfile
}

export interface BasketballProfilePreviousValues {
  id: ID_Output
  players?: Int
}

export interface BasketballProfileSubscriptionPayload {
  mutation: MutationType
  node?: BasketballProfile
  updatedFields?: String[]
  previousValues?: BasketballProfilePreviousValues
}

export interface GameProfile extends Node {
  id: ID_Output
  gameCategory?: GameCategory
  pubg?: PubgProfile
  lol?: LolProfile
}

export interface SoccerProfilePreviousValues {
  id: ID_Output
  players?: Int
}

export interface AggregateUser {
  count: Int
}

export interface PubgProfileEdge {
  node: PubgProfile
  cursor: String
}

export interface SoccerProfileConnection {
  pageInfo: PageInfo
  edges: SoccerProfileEdge[]
  aggregate: AggregateSoccerProfile
}

export interface AggregateChatRoom {
  count: Int
}

export type DateTime = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type Long = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  profiles: (args: { where?: ProfileWhereInput, orderBy?: ProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Profile[]>
  gameProfiles: (args: { where?: GameProfileWhereInput, orderBy?: GameProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<GameProfile[]>
  pubgProfiles: (args: { where?: PubgProfileWhereInput, orderBy?: PubgProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile[]>
  lolProfiles: (args: { where?: LolProfileWhereInput, orderBy?: LolProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LolProfile[]>
  sportsProfiles: (args: { where?: SportsProfileWhereInput, orderBy?: SportsProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile[]>
  soccerProfiles: (args: { where?: SoccerProfileWhereInput, orderBy?: SoccerProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile[]>
  basketballProfiles: (args: { where?: BasketballProfileWhereInput, orderBy?: BasketballProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile[]>
  chatRooms: (args: { where?: ChatRoomWhereInput, orderBy?: ChatRoomOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom[]>
  chats: (args: { where?: ChatWhereInput, orderBy?: ChatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Chat[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  profile: (args: { where: ProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Profile | null>
  gameProfile: (args: { where: GameProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GameProfile | null>
  pubgProfile: (args: { where: PubgProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile | null>
  lolProfile: (args: { where: LolProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LolProfile | null>
  sportsProfile: (args: { where: SportsProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile | null>
  soccerProfile: (args: { where: SoccerProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile | null>
  basketballProfile: (args: { where: BasketballProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile | null>
  chatRoom: (args: { where: ChatRoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom | null>
  chat: (args: { where: ChatWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Chat | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  profilesConnection: (args: { where?: ProfileWhereInput, orderBy?: ProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ProfileConnection>
  gameProfilesConnection: (args: { where?: GameProfileWhereInput, orderBy?: GameProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<GameProfileConnection>
  pubgProfilesConnection: (args: { where?: PubgProfileWhereInput, orderBy?: PubgProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PubgProfileConnection>
  lolProfilesConnection: (args: { where?: LolProfileWhereInput, orderBy?: LolProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LolProfileConnection>
  sportsProfilesConnection: (args: { where?: SportsProfileWhereInput, orderBy?: SportsProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SportsProfileConnection>
  soccerProfilesConnection: (args: { where?: SoccerProfileWhereInput, orderBy?: SoccerProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfileConnection>
  basketballProfilesConnection: (args: { where?: BasketballProfileWhereInput, orderBy?: BasketballProfileOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfileConnection>
  chatRoomsConnection: (args: { where?: ChatRoomWhereInput, orderBy?: ChatRoomOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ChatRoomConnection>
  chatsConnection: (args: { where?: ChatWhereInput, orderBy?: ChatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ChatConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createProfile: (args: { data: ProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Profile>
  createGameProfile: (args: { data: GameProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<GameProfile>
  createPubgProfile: (args: { data: PubgProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile>
  createLolProfile: (args: { data: LolProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<LolProfile>
  createSportsProfile: (args: { data: SportsProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile>
  createSoccerProfile: (args: { data: SoccerProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile>
  createBasketballProfile: (args: { data: BasketballProfileCreateInput }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile>
  createChatRoom: (args: { data: ChatRoomCreateInput }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom>
  createChat: (args: { data: ChatCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Chat>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateProfile: (args: { data: ProfileUpdateInput, where: ProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Profile | null>
  updateGameProfile: (args: { data: GameProfileUpdateInput, where: GameProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GameProfile | null>
  updatePubgProfile: (args: { data: PubgProfileUpdateInput, where: PubgProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile | null>
  updateLolProfile: (args: { data: LolProfileUpdateInput, where: LolProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LolProfile | null>
  updateSportsProfile: (args: { data: SportsProfileUpdateInput, where: SportsProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile | null>
  updateSoccerProfile: (args: { data: SoccerProfileUpdateInput, where: SoccerProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile | null>
  updateBasketballProfile: (args: { data: BasketballProfileUpdateInput, where: BasketballProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile | null>
  updateChatRoom: (args: { data: ChatRoomUpdateInput, where: ChatRoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom | null>
  updateChat: (args: { data: ChatUpdateInput, where: ChatWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Chat | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteProfile: (args: { where: ProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Profile | null>
  deleteGameProfile: (args: { where: GameProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GameProfile | null>
  deletePubgProfile: (args: { where: PubgProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile | null>
  deleteLolProfile: (args: { where: LolProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<LolProfile | null>
  deleteSportsProfile: (args: { where: SportsProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile | null>
  deleteSoccerProfile: (args: { where: SoccerProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile | null>
  deleteBasketballProfile: (args: { where: BasketballProfileWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile | null>
  deleteChatRoom: (args: { where: ChatRoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom | null>
  deleteChat: (args: { where: ChatWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Chat | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertProfile: (args: { where: ProfileWhereUniqueInput, create: ProfileCreateInput, update: ProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Profile>
  upsertGameProfile: (args: { where: GameProfileWhereUniqueInput, create: GameProfileCreateInput, update: GameProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<GameProfile>
  upsertPubgProfile: (args: { where: PubgProfileWhereUniqueInput, create: PubgProfileCreateInput, update: PubgProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<PubgProfile>
  upsertLolProfile: (args: { where: LolProfileWhereUniqueInput, create: LolProfileCreateInput, update: LolProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<LolProfile>
  upsertSportsProfile: (args: { where: SportsProfileWhereUniqueInput, create: SportsProfileCreateInput, update: SportsProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<SportsProfile>
  upsertSoccerProfile: (args: { where: SoccerProfileWhereUniqueInput, create: SoccerProfileCreateInput, update: SoccerProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<SoccerProfile>
  upsertBasketballProfile: (args: { where: BasketballProfileWhereUniqueInput, create: BasketballProfileCreateInput, update: BasketballProfileUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<BasketballProfile>
  upsertChatRoom: (args: { where: ChatRoomWhereUniqueInput, create: ChatRoomCreateInput, update: ChatRoomUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<ChatRoom>
  upsertChat: (args: { where: ChatWhereUniqueInput, create: ChatCreateInput, update: ChatUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Chat>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyProfiles: (args: { data: ProfileUpdateInput, where: ProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyGameProfiles: (args: { data: GameProfileUpdateInput, where: GameProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPubgProfiles: (args: { data: PubgProfileUpdateInput, where: PubgProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyLolProfiles: (args: { data: LolProfileUpdateInput, where: LolProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManySportsProfiles: (args: { data: SportsProfileUpdateInput, where: SportsProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManySoccerProfiles: (args: { data: SoccerProfileUpdateInput, where: SoccerProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyBasketballProfiles: (args: { data: BasketballProfileUpdateInput, where: BasketballProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyChatRooms: (args: { data: ChatRoomUpdateInput, where: ChatRoomWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyChats: (args: { data: ChatUpdateInput, where: ChatWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyProfiles: (args: { where: ProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyGameProfiles: (args: { where: GameProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPubgProfiles: (args: { where: PubgProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyLolProfiles: (args: { where: LolProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManySportsProfiles: (args: { where: SportsProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManySoccerProfiles: (args: { where: SoccerProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyBasketballProfiles: (args: { where: BasketballProfileWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyChatRooms: (args: { where: ChatRoomWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyChats: (args: { where: ChatWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  profile: (args: { where?: ProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ProfileSubscriptionPayload>>
  gameProfile: (args: { where?: GameProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<GameProfileSubscriptionPayload>>
  pubgProfile: (args: { where?: PubgProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PubgProfileSubscriptionPayload>>
  lolProfile: (args: { where?: LolProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<LolProfileSubscriptionPayload>>
  sportsProfile: (args: { where?: SportsProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<SportsProfileSubscriptionPayload>>
  soccerProfile: (args: { where?: SoccerProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<SoccerProfileSubscriptionPayload>>
  basketballProfile: (args: { where?: BasketballProfileSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<BasketballProfileSubscriptionPayload>>
  chatRoom: (args: { where?: ChatRoomSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ChatRoomSubscriptionPayload>>
  chat: (args: { where?: ChatSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ChatSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Profile: (where: ProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'profiles', { where }, {}, '{ id }'),
    GameProfile: (where: GameProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'gameProfiles', { where }, {}, '{ id }'),
    PubgProfile: (where: PubgProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'pubgProfiles', { where }, {}, '{ id }'),
    LolProfile: (where: LolProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'lolProfiles', { where }, {}, '{ id }'),
    SportsProfile: (where: SportsProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'sportsProfiles', { where }, {}, '{ id }'),
    SoccerProfile: (where: SoccerProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'soccerProfiles', { where }, {}, '{ id }'),
    BasketballProfile: (where: BasketballProfileWhereInput): Promise<boolean> => super.existsDelegate('query', 'basketballProfiles', { where }, {}, '{ id }'),
    ChatRoom: (where: ChatRoomWhereInput): Promise<boolean> => super.existsDelegate('query', 'chatRooms', { where }, {}, '{ id }'),
    Chat: (where: ChatWhereInput): Promise<boolean> => super.existsDelegate('query', 'chats', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    profiles: (args, info): Promise<Profile[]> => super.delegate('query', 'profiles', args, {}, info),
    gameProfiles: (args, info): Promise<GameProfile[]> => super.delegate('query', 'gameProfiles', args, {}, info),
    pubgProfiles: (args, info): Promise<PubgProfile[]> => super.delegate('query', 'pubgProfiles', args, {}, info),
    lolProfiles: (args, info): Promise<LolProfile[]> => super.delegate('query', 'lolProfiles', args, {}, info),
    sportsProfiles: (args, info): Promise<SportsProfile[]> => super.delegate('query', 'sportsProfiles', args, {}, info),
    soccerProfiles: (args, info): Promise<SoccerProfile[]> => super.delegate('query', 'soccerProfiles', args, {}, info),
    basketballProfiles: (args, info): Promise<BasketballProfile[]> => super.delegate('query', 'basketballProfiles', args, {}, info),
    chatRooms: (args, info): Promise<ChatRoom[]> => super.delegate('query', 'chatRooms', args, {}, info),
    chats: (args, info): Promise<Chat[]> => super.delegate('query', 'chats', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    profile: (args, info): Promise<Profile | null> => super.delegate('query', 'profile', args, {}, info),
    gameProfile: (args, info): Promise<GameProfile | null> => super.delegate('query', 'gameProfile', args, {}, info),
    pubgProfile: (args, info): Promise<PubgProfile | null> => super.delegate('query', 'pubgProfile', args, {}, info),
    lolProfile: (args, info): Promise<LolProfile | null> => super.delegate('query', 'lolProfile', args, {}, info),
    sportsProfile: (args, info): Promise<SportsProfile | null> => super.delegate('query', 'sportsProfile', args, {}, info),
    soccerProfile: (args, info): Promise<SoccerProfile | null> => super.delegate('query', 'soccerProfile', args, {}, info),
    basketballProfile: (args, info): Promise<BasketballProfile | null> => super.delegate('query', 'basketballProfile', args, {}, info),
    chatRoom: (args, info): Promise<ChatRoom | null> => super.delegate('query', 'chatRoom', args, {}, info),
    chat: (args, info): Promise<Chat | null> => super.delegate('query', 'chat', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    profilesConnection: (args, info): Promise<ProfileConnection> => super.delegate('query', 'profilesConnection', args, {}, info),
    gameProfilesConnection: (args, info): Promise<GameProfileConnection> => super.delegate('query', 'gameProfilesConnection', args, {}, info),
    pubgProfilesConnection: (args, info): Promise<PubgProfileConnection> => super.delegate('query', 'pubgProfilesConnection', args, {}, info),
    lolProfilesConnection: (args, info): Promise<LolProfileConnection> => super.delegate('query', 'lolProfilesConnection', args, {}, info),
    sportsProfilesConnection: (args, info): Promise<SportsProfileConnection> => super.delegate('query', 'sportsProfilesConnection', args, {}, info),
    soccerProfilesConnection: (args, info): Promise<SoccerProfileConnection> => super.delegate('query', 'soccerProfilesConnection', args, {}, info),
    basketballProfilesConnection: (args, info): Promise<BasketballProfileConnection> => super.delegate('query', 'basketballProfilesConnection', args, {}, info),
    chatRoomsConnection: (args, info): Promise<ChatRoomConnection> => super.delegate('query', 'chatRoomsConnection', args, {}, info),
    chatsConnection: (args, info): Promise<ChatConnection> => super.delegate('query', 'chatsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createProfile: (args, info): Promise<Profile> => super.delegate('mutation', 'createProfile', args, {}, info),
    createGameProfile: (args, info): Promise<GameProfile> => super.delegate('mutation', 'createGameProfile', args, {}, info),
    createPubgProfile: (args, info): Promise<PubgProfile> => super.delegate('mutation', 'createPubgProfile', args, {}, info),
    createLolProfile: (args, info): Promise<LolProfile> => super.delegate('mutation', 'createLolProfile', args, {}, info),
    createSportsProfile: (args, info): Promise<SportsProfile> => super.delegate('mutation', 'createSportsProfile', args, {}, info),
    createSoccerProfile: (args, info): Promise<SoccerProfile> => super.delegate('mutation', 'createSoccerProfile', args, {}, info),
    createBasketballProfile: (args, info): Promise<BasketballProfile> => super.delegate('mutation', 'createBasketballProfile', args, {}, info),
    createChatRoom: (args, info): Promise<ChatRoom> => super.delegate('mutation', 'createChatRoom', args, {}, info),
    createChat: (args, info): Promise<Chat> => super.delegate('mutation', 'createChat', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateProfile: (args, info): Promise<Profile | null> => super.delegate('mutation', 'updateProfile', args, {}, info),
    updateGameProfile: (args, info): Promise<GameProfile | null> => super.delegate('mutation', 'updateGameProfile', args, {}, info),
    updatePubgProfile: (args, info): Promise<PubgProfile | null> => super.delegate('mutation', 'updatePubgProfile', args, {}, info),
    updateLolProfile: (args, info): Promise<LolProfile | null> => super.delegate('mutation', 'updateLolProfile', args, {}, info),
    updateSportsProfile: (args, info): Promise<SportsProfile | null> => super.delegate('mutation', 'updateSportsProfile', args, {}, info),
    updateSoccerProfile: (args, info): Promise<SoccerProfile | null> => super.delegate('mutation', 'updateSoccerProfile', args, {}, info),
    updateBasketballProfile: (args, info): Promise<BasketballProfile | null> => super.delegate('mutation', 'updateBasketballProfile', args, {}, info),
    updateChatRoom: (args, info): Promise<ChatRoom | null> => super.delegate('mutation', 'updateChatRoom', args, {}, info),
    updateChat: (args, info): Promise<Chat | null> => super.delegate('mutation', 'updateChat', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteProfile: (args, info): Promise<Profile | null> => super.delegate('mutation', 'deleteProfile', args, {}, info),
    deleteGameProfile: (args, info): Promise<GameProfile | null> => super.delegate('mutation', 'deleteGameProfile', args, {}, info),
    deletePubgProfile: (args, info): Promise<PubgProfile | null> => super.delegate('mutation', 'deletePubgProfile', args, {}, info),
    deleteLolProfile: (args, info): Promise<LolProfile | null> => super.delegate('mutation', 'deleteLolProfile', args, {}, info),
    deleteSportsProfile: (args, info): Promise<SportsProfile | null> => super.delegate('mutation', 'deleteSportsProfile', args, {}, info),
    deleteSoccerProfile: (args, info): Promise<SoccerProfile | null> => super.delegate('mutation', 'deleteSoccerProfile', args, {}, info),
    deleteBasketballProfile: (args, info): Promise<BasketballProfile | null> => super.delegate('mutation', 'deleteBasketballProfile', args, {}, info),
    deleteChatRoom: (args, info): Promise<ChatRoom | null> => super.delegate('mutation', 'deleteChatRoom', args, {}, info),
    deleteChat: (args, info): Promise<Chat | null> => super.delegate('mutation', 'deleteChat', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertProfile: (args, info): Promise<Profile> => super.delegate('mutation', 'upsertProfile', args, {}, info),
    upsertGameProfile: (args, info): Promise<GameProfile> => super.delegate('mutation', 'upsertGameProfile', args, {}, info),
    upsertPubgProfile: (args, info): Promise<PubgProfile> => super.delegate('mutation', 'upsertPubgProfile', args, {}, info),
    upsertLolProfile: (args, info): Promise<LolProfile> => super.delegate('mutation', 'upsertLolProfile', args, {}, info),
    upsertSportsProfile: (args, info): Promise<SportsProfile> => super.delegate('mutation', 'upsertSportsProfile', args, {}, info),
    upsertSoccerProfile: (args, info): Promise<SoccerProfile> => super.delegate('mutation', 'upsertSoccerProfile', args, {}, info),
    upsertBasketballProfile: (args, info): Promise<BasketballProfile> => super.delegate('mutation', 'upsertBasketballProfile', args, {}, info),
    upsertChatRoom: (args, info): Promise<ChatRoom> => super.delegate('mutation', 'upsertChatRoom', args, {}, info),
    upsertChat: (args, info): Promise<Chat> => super.delegate('mutation', 'upsertChat', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyProfiles', args, {}, info),
    updateManyGameProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyGameProfiles', args, {}, info),
    updateManyPubgProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPubgProfiles', args, {}, info),
    updateManyLolProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyLolProfiles', args, {}, info),
    updateManySportsProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManySportsProfiles', args, {}, info),
    updateManySoccerProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManySoccerProfiles', args, {}, info),
    updateManyBasketballProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyBasketballProfiles', args, {}, info),
    updateManyChatRooms: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyChatRooms', args, {}, info),
    updateManyChats: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyChats', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyProfiles', args, {}, info),
    deleteManyGameProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyGameProfiles', args, {}, info),
    deleteManyPubgProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPubgProfiles', args, {}, info),
    deleteManyLolProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyLolProfiles', args, {}, info),
    deleteManySportsProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManySportsProfiles', args, {}, info),
    deleteManySoccerProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManySoccerProfiles', args, {}, info),
    deleteManyBasketballProfiles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyBasketballProfiles', args, {}, info),
    deleteManyChatRooms: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyChatRooms', args, {}, info),
    deleteManyChats: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyChats', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    profile: (args, infoOrQuery): Promise<AsyncIterator<ProfileSubscriptionPayload>> => super.delegateSubscription('profile', args, {}, infoOrQuery),
    gameProfile: (args, infoOrQuery): Promise<AsyncIterator<GameProfileSubscriptionPayload>> => super.delegateSubscription('gameProfile', args, {}, infoOrQuery),
    pubgProfile: (args, infoOrQuery): Promise<AsyncIterator<PubgProfileSubscriptionPayload>> => super.delegateSubscription('pubgProfile', args, {}, infoOrQuery),
    lolProfile: (args, infoOrQuery): Promise<AsyncIterator<LolProfileSubscriptionPayload>> => super.delegateSubscription('lolProfile', args, {}, infoOrQuery),
    sportsProfile: (args, infoOrQuery): Promise<AsyncIterator<SportsProfileSubscriptionPayload>> => super.delegateSubscription('sportsProfile', args, {}, infoOrQuery),
    soccerProfile: (args, infoOrQuery): Promise<AsyncIterator<SoccerProfileSubscriptionPayload>> => super.delegateSubscription('soccerProfile', args, {}, infoOrQuery),
    basketballProfile: (args, infoOrQuery): Promise<AsyncIterator<BasketballProfileSubscriptionPayload>> => super.delegateSubscription('basketballProfile', args, {}, infoOrQuery),
    chatRoom: (args, infoOrQuery): Promise<AsyncIterator<ChatRoomSubscriptionPayload>> => super.delegateSubscription('chatRoom', args, {}, infoOrQuery),
    chat: (args, infoOrQuery): Promise<AsyncIterator<ChatSubscriptionPayload>> => super.delegateSubscription('chat', args, {}, infoOrQuery)
  }
}