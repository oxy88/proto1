# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type BasketballProfile implements Node {
  id: ID!
  players: Int
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
}

type Chat implements Node {
  id: ID!
  createdAt: DateTime!
  text: String
  user(where: UserWhereInput): User!
  chatRoom(where: ChatRoomWhereInput): ChatRoom!
}

type ChatRoom implements Node {
  id: ID!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GameProfile implements Node {
  id: ID!
  gameCategory: GameCategory
  pubg(where: PubgProfileWhereInput): PubgProfile
  lol(where: LolProfileWhereInput): LolProfile
}

type LolProfile implements Node {
  id: ID!
  gameProfile(where: GameProfileWhereInput): GameProfile
  mode: LolMode
  role: LolRole
}

type Profile implements Node {
  id: ID!
  category: Category
  gameProfile(where: GameProfileWhereInput): GameProfile
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
  user(where: UserWhereInput): User
}

type PubgProfile implements Node {
  id: ID!
  gameProfile(where: GameProfileWhereInput): GameProfile
  mode: PubgMode
  server: PubgServer
}

type SoccerProfile implements Node {
  id: ID!
  players: Int
  sportsProfile(where: SportsProfileWhereInput): SportsProfile
}

type SportsProfile implements Node {
  id: ID!
  sportsCategory: SportsCategory
  soccer(where: SoccerProfileWhereInput): SoccerProfile
  basketball(where: BasketballProfileWhereInput): BasketballProfile
}

type User implements Node {
  id: ID!
  facebookUserId: String
  googleUserId: String
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile!]
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom!]
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
}


#
# Other Types
#

type AggregateBasketballProfile {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregateChatRoom {
  count: Int!
}

type AggregateGameProfile {
  count: Int!
}

type AggregateLolProfile {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregatePubgProfile {
  count: Int!
}

type AggregateSoccerProfile {
  count: Int!
}

type AggregateSportsProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BasketballProfileConnection {
  pageInfo: PageInfo!
  edges: [BasketballProfileEdge]!
  aggregate: AggregateBasketballProfile!
}

input BasketballProfileCreateInput {
  players: Int
  sportsProfile: SportsProfileCreateOneWithoutBasketballInput
}

input BasketballProfileCreateOneWithoutSportsProfileInput {
  create: BasketballProfileCreateWithoutSportsProfileInput
  connect: BasketballProfileWhereUniqueInput
}

input BasketballProfileCreateWithoutSportsProfileInput {
  players: Int
}

type BasketballProfileEdge {
  node: BasketballProfile!
  cursor: String!
}

enum BasketballProfileOrderByInput {
  id_ASC
  id_DESC
  players_ASC
  players_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BasketballProfilePreviousValues {
  id: ID!
  players: Int
}

type BasketballProfileSubscriptionPayload {
  mutation: MutationType!
  node: BasketballProfile
  updatedFields: [String!]
  previousValues: BasketballProfilePreviousValues
}

input BasketballProfileSubscriptionWhereInput {
  AND: [BasketballProfileSubscriptionWhereInput!]
  OR: [BasketballProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BasketballProfileWhereInput
}

input BasketballProfileUpdateInput {
  players: Int
  sportsProfile: SportsProfileUpdateOneWithoutBasketballInput
}

input BasketballProfileUpdateOneWithoutSportsProfileInput {
  create: BasketballProfileCreateWithoutSportsProfileInput
  connect: BasketballProfileWhereUniqueInput
  disconnect: BasketballProfileWhereUniqueInput
  delete: BasketballProfileWhereUniqueInput
  update: BasketballProfileUpdateWithoutSportsProfileInput
  upsert: BasketballProfileUpsertWithoutSportsProfileInput
}

input BasketballProfileUpdateWithoutSportsProfileDataInput {
  players: Int
}

input BasketballProfileUpdateWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput!
  data: BasketballProfileUpdateWithoutSportsProfileDataInput!
}

input BasketballProfileUpsertWithoutSportsProfileInput {
  where: BasketballProfileWhereUniqueInput!
  update: BasketballProfileUpdateWithoutSportsProfileDataInput!
  create: BasketballProfileCreateWithoutSportsProfileInput!
}

input BasketballProfileWhereInput {
  AND: [BasketballProfileWhereInput!]
  OR: [BasketballProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  players: Int
  players_not: Int
  players_in: [Int!]
  players_not_in: [Int!]
  players_lt: Int
  players_lte: Int
  players_gt: Int
  players_gte: Int
  sportsProfile: SportsProfileWhereInput
}

input BasketballProfileWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

enum Category {
  GAME
  SPORTS
}

type ChatConnection {
  pageInfo: PageInfo!
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  text: String
  user: UserCreateOneWithoutChatsInput!
  chatRoom: ChatRoomCreateOneWithoutChatsInput!
}

input ChatCreateManyWithoutChatRoomInput {
  create: [ChatCreateWithoutChatRoomInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateManyWithoutUserInput {
  create: [ChatCreateWithoutUserInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateWithoutChatRoomInput {
  text: String
  user: UserCreateOneWithoutChatsInput!
}

input ChatCreateWithoutUserInput {
  text: String
  chatRoom: ChatRoomCreateOneWithoutChatsInput!
}

type ChatEdge {
  node: Chat!
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String
}

type ChatRoomConnection {
  pageInfo: PageInfo!
  edges: [ChatRoomEdge]!
  aggregate: AggregateChatRoom!
}

input ChatRoomCreateInput {
  chats: ChatCreateManyWithoutChatRoomInput
  users: UserCreateManyWithoutChatRoomsInput
}

input ChatRoomCreateManyWithoutUsersInput {
  create: [ChatRoomCreateWithoutUsersInput!]
  connect: [ChatRoomWhereUniqueInput!]
}

input ChatRoomCreateOneWithoutChatsInput {
  create: ChatRoomCreateWithoutChatsInput
  connect: ChatRoomWhereUniqueInput
}

input ChatRoomCreateWithoutChatsInput {
  users: UserCreateManyWithoutChatRoomsInput
}

input ChatRoomCreateWithoutUsersInput {
  chats: ChatCreateManyWithoutChatRoomInput
}

type ChatRoomEdge {
  node: ChatRoom!
  cursor: String!
}

enum ChatRoomOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChatRoomPreviousValues {
  id: ID!
}

type ChatRoomSubscriptionPayload {
  mutation: MutationType!
  node: ChatRoom
  updatedFields: [String!]
  previousValues: ChatRoomPreviousValues
}

input ChatRoomSubscriptionWhereInput {
  AND: [ChatRoomSubscriptionWhereInput!]
  OR: [ChatRoomSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatRoomWhereInput
}

input ChatRoomUpdateInput {
  chats: ChatUpdateManyWithoutChatRoomInput
  users: UserUpdateManyWithoutChatRoomsInput
}

input ChatRoomUpdateManyWithoutUsersInput {
  create: [ChatRoomCreateWithoutUsersInput!]
  connect: [ChatRoomWhereUniqueInput!]
  disconnect: [ChatRoomWhereUniqueInput!]
  delete: [ChatRoomWhereUniqueInput!]
  update: [ChatRoomUpdateWithoutUsersInput!]
  upsert: [ChatRoomUpsertWithoutUsersInput!]
}

input ChatRoomUpdateOneWithoutChatsInput {
  create: ChatRoomCreateWithoutChatsInput
  connect: ChatRoomWhereUniqueInput
  disconnect: ChatRoomWhereUniqueInput
  delete: ChatRoomWhereUniqueInput
  update: ChatRoomUpdateWithoutChatsInput
  upsert: ChatRoomUpsertWithoutChatsInput
}

input ChatRoomUpdateWithoutChatsDataInput {
  users: UserUpdateManyWithoutChatRoomsInput
}

input ChatRoomUpdateWithoutChatsInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutChatsDataInput!
}

input ChatRoomUpdateWithoutUsersDataInput {
  chats: ChatUpdateManyWithoutChatRoomInput
}

input ChatRoomUpdateWithoutUsersInput {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateWithoutUsersDataInput!
}

input ChatRoomUpsertWithoutChatsInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutChatsDataInput!
  create: ChatRoomCreateWithoutChatsInput!
}

input ChatRoomUpsertWithoutUsersInput {
  where: ChatRoomWhereUniqueInput!
  update: ChatRoomUpdateWithoutUsersDataInput!
  create: ChatRoomCreateWithoutUsersInput!
}

input ChatRoomWhereInput {
  AND: [ChatRoomWhereInput!]
  OR: [ChatRoomWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input ChatRoomWhereUniqueInput {
  id: ID
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  AND: [ChatSubscriptionWhereInput!]
  OR: [ChatSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

input ChatUpdateInput {
  text: String
  user: UserUpdateOneWithoutChatsInput
  chatRoom: ChatRoomUpdateOneWithoutChatsInput
}

input ChatUpdateManyWithoutChatRoomInput {
  create: [ChatCreateWithoutChatRoomInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithoutChatRoomInput!]
  upsert: [ChatUpsertWithoutChatRoomInput!]
}

input ChatUpdateManyWithoutUserInput {
  create: [ChatCreateWithoutUserInput!]
  connect: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithoutUserInput!]
  upsert: [ChatUpsertWithoutUserInput!]
}

input ChatUpdateWithoutChatRoomDataInput {
  text: String
  user: UserUpdateOneWithoutChatsInput
}

input ChatUpdateWithoutChatRoomInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutChatRoomDataInput!
}

input ChatUpdateWithoutUserDataInput {
  text: String
  chatRoom: ChatRoomUpdateOneWithoutChatsInput
}

input ChatUpdateWithoutUserInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutUserDataInput!
}

input ChatUpsertWithoutChatRoomInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutChatRoomDataInput!
  create: ChatCreateWithoutChatRoomInput!
}

input ChatUpsertWithoutUserInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutUserDataInput!
  create: ChatCreateWithoutUserInput!
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  chatRoom: ChatRoomWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

enum GameCategory {
  PUBG
  LOL
}

type GameProfileConnection {
  pageInfo: PageInfo!
  edges: [GameProfileEdge]!
  aggregate: AggregateGameProfile!
}

input GameProfileCreateInput {
  gameCategory: GameCategory
  pubg: PubgProfileCreateOneWithoutGameProfileInput
  lol: LolProfileCreateOneWithoutGameProfileInput
}

input GameProfileCreateOneInput {
  create: GameProfileCreateInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateOneWithoutLolInput {
  create: GameProfileCreateWithoutLolInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateOneWithoutPubgInput {
  create: GameProfileCreateWithoutPubgInput
  connect: GameProfileWhereUniqueInput
}

input GameProfileCreateWithoutLolInput {
  gameCategory: GameCategory
  pubg: PubgProfileCreateOneWithoutGameProfileInput
}

input GameProfileCreateWithoutPubgInput {
  gameCategory: GameCategory
  lol: LolProfileCreateOneWithoutGameProfileInput
}

type GameProfileEdge {
  node: GameProfile!
  cursor: String!
}

enum GameProfileOrderByInput {
  id_ASC
  id_DESC
  gameCategory_ASC
  gameCategory_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GameProfilePreviousValues {
  id: ID!
  gameCategory: GameCategory
}

type GameProfileSubscriptionPayload {
  mutation: MutationType!
  node: GameProfile
  updatedFields: [String!]
  previousValues: GameProfilePreviousValues
}

input GameProfileSubscriptionWhereInput {
  AND: [GameProfileSubscriptionWhereInput!]
  OR: [GameProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameProfileWhereInput
}

input GameProfileUpdateInput {
  gameCategory: GameCategory
  pubg: PubgProfileUpdateOneWithoutGameProfileInput
  lol: LolProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateOneInput {
  create: GameProfileCreateInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
}

input GameProfileUpdateOneWithoutLolInput {
  create: GameProfileCreateWithoutLolInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutLolInput
  upsert: GameProfileUpsertWithoutLolInput
}

input GameProfileUpdateOneWithoutPubgInput {
  create: GameProfileCreateWithoutPubgInput
  connect: GameProfileWhereUniqueInput
  disconnect: GameProfileWhereUniqueInput
  delete: GameProfileWhereUniqueInput
  update: GameProfileUpdateWithoutPubgInput
  upsert: GameProfileUpsertWithoutPubgInput
}

input GameProfileUpdateWithoutLolDataInput {
  gameCategory: GameCategory
  pubg: PubgProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateWithoutLolInput {
  where: GameProfileWhereUniqueInput!
  data: GameProfileUpdateWithoutLolDataInput!
}

input GameProfileUpdateWithoutPubgDataInput {
  gameCategory: GameCategory
  lol: LolProfileUpdateOneWithoutGameProfileInput
}

input GameProfileUpdateWithoutPubgInput {
  where: GameProfileWhereUniqueInput!
  data: GameProfileUpdateWithoutPubgDataInput!
}

input GameProfileUpsertWithoutLolInput {
  where: GameProfileWhereUniqueInput!
  update: GameProfileUpdateWithoutLolDataInput!
  create: GameProfileCreateWithoutLolInput!
}

input GameProfileUpsertWithoutPubgInput {
  where: GameProfileWhereUniqueInput!
  update: GameProfileUpdateWithoutPubgDataInput!
  create: GameProfileCreateWithoutPubgInput!
}

input GameProfileWhereInput {
  AND: [GameProfileWhereInput!]
  OR: [GameProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gameCategory: GameCategory
  gameCategory_not: GameCategory
  gameCategory_in: [GameCategory!]
  gameCategory_not_in: [GameCategory!]
  pubg: PubgProfileWhereInput
  lol: LolProfileWhereInput
}

input GameProfileWhereUniqueInput {
  id: ID
}

enum LolMode {
  DUO_RANK
  FLEX_RANK
  NORMAL
}

type LolProfileConnection {
  pageInfo: PageInfo!
  edges: [LolProfileEdge]!
  aggregate: AggregateLolProfile!
}

input LolProfileCreateInput {
  mode: LolMode
  role: LolRole
  gameProfile: GameProfileCreateOneWithoutLolInput
}

input LolProfileCreateOneWithoutGameProfileInput {
  create: LolProfileCreateWithoutGameProfileInput
  connect: LolProfileWhereUniqueInput
}

input LolProfileCreateWithoutGameProfileInput {
  mode: LolMode
  role: LolRole
}

type LolProfileEdge {
  node: LolProfile!
  cursor: String!
}

enum LolProfileOrderByInput {
  id_ASC
  id_DESC
  mode_ASC
  mode_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LolProfilePreviousValues {
  id: ID!
  mode: LolMode
  role: LolRole
}

type LolProfileSubscriptionPayload {
  mutation: MutationType!
  node: LolProfile
  updatedFields: [String!]
  previousValues: LolProfilePreviousValues
}

input LolProfileSubscriptionWhereInput {
  AND: [LolProfileSubscriptionWhereInput!]
  OR: [LolProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LolProfileWhereInput
}

input LolProfileUpdateInput {
  mode: LolMode
  role: LolRole
  gameProfile: GameProfileUpdateOneWithoutLolInput
}

input LolProfileUpdateOneWithoutGameProfileInput {
  create: LolProfileCreateWithoutGameProfileInput
  connect: LolProfileWhereUniqueInput
  disconnect: LolProfileWhereUniqueInput
  delete: LolProfileWhereUniqueInput
  update: LolProfileUpdateWithoutGameProfileInput
  upsert: LolProfileUpsertWithoutGameProfileInput
}

input LolProfileUpdateWithoutGameProfileDataInput {
  mode: LolMode
  role: LolRole
}

input LolProfileUpdateWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput!
  data: LolProfileUpdateWithoutGameProfileDataInput!
}

input LolProfileUpsertWithoutGameProfileInput {
  where: LolProfileWhereUniqueInput!
  update: LolProfileUpdateWithoutGameProfileDataInput!
  create: LolProfileCreateWithoutGameProfileInput!
}

input LolProfileWhereInput {
  AND: [LolProfileWhereInput!]
  OR: [LolProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mode: LolMode
  mode_not: LolMode
  mode_in: [LolMode!]
  mode_not_in: [LolMode!]
  role: LolRole
  role_not: LolRole
  role_in: [LolRole!]
  role_not_in: [LolRole!]
  gameProfile: GameProfileWhereInput
}

input LolProfileWhereUniqueInput {
  id: ID
}

enum LolRole {
  TOP
  JUNGLE
  MID
  ADC
  SUPPORT
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProfile(data: ProfileCreateInput!): Profile!
  createGameProfile(data: GameProfileCreateInput!): GameProfile!
  createPubgProfile(data: PubgProfileCreateInput!): PubgProfile!
  createLolProfile(data: LolProfileCreateInput!): LolProfile!
  createSportsProfile(data: SportsProfileCreateInput!): SportsProfile!
  createSoccerProfile(data: SoccerProfileCreateInput!): SoccerProfile!
  createBasketballProfile(data: BasketballProfileCreateInput!): BasketballProfile!
  createChatRoom(data: ChatRoomCreateInput!): ChatRoom!
  createChat(data: ChatCreateInput!): Chat!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateGameProfile(data: GameProfileUpdateInput!, where: GameProfileWhereUniqueInput!): GameProfile
  updatePubgProfile(data: PubgProfileUpdateInput!, where: PubgProfileWhereUniqueInput!): PubgProfile
  updateLolProfile(data: LolProfileUpdateInput!, where: LolProfileWhereUniqueInput!): LolProfile
  updateSportsProfile(data: SportsProfileUpdateInput!, where: SportsProfileWhereUniqueInput!): SportsProfile
  updateSoccerProfile(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereUniqueInput!): SoccerProfile
  updateBasketballProfile(data: BasketballProfileUpdateInput!, where: BasketballProfileWhereUniqueInput!): BasketballProfile
  updateChatRoom(data: ChatRoomUpdateInput!, where: ChatRoomWhereUniqueInput!): ChatRoom
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteGameProfile(where: GameProfileWhereUniqueInput!): GameProfile
  deletePubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  deleteLolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  deleteSportsProfile(where: SportsProfileWhereUniqueInput!): SportsProfile
  deleteSoccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  deleteBasketballProfile(where: BasketballProfileWhereUniqueInput!): BasketballProfile
  deleteChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  deleteChat(where: ChatWhereUniqueInput!): Chat
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertGameProfile(where: GameProfileWhereUniqueInput!, create: GameProfileCreateInput!, update: GameProfileUpdateInput!): GameProfile!
  upsertPubgProfile(where: PubgProfileWhereUniqueInput!, create: PubgProfileCreateInput!, update: PubgProfileUpdateInput!): PubgProfile!
  upsertLolProfile(where: LolProfileWhereUniqueInput!, create: LolProfileCreateInput!, update: LolProfileUpdateInput!): LolProfile!
  upsertSportsProfile(where: SportsProfileWhereUniqueInput!, create: SportsProfileCreateInput!, update: SportsProfileUpdateInput!): SportsProfile!
  upsertSoccerProfile(where: SoccerProfileWhereUniqueInput!, create: SoccerProfileCreateInput!, update: SoccerProfileUpdateInput!): SoccerProfile!
  upsertBasketballProfile(where: BasketballProfileWhereUniqueInput!, create: BasketballProfileCreateInput!, update: BasketballProfileUpdateInput!): BasketballProfile!
  upsertChatRoom(where: ChatRoomWhereUniqueInput!, create: ChatRoomCreateInput!, update: ChatRoomUpdateInput!): ChatRoom!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyProfiles(data: ProfileUpdateInput!, where: ProfileWhereInput!): BatchPayload!
  updateManyGameProfiles(data: GameProfileUpdateInput!, where: GameProfileWhereInput!): BatchPayload!
  updateManyPubgProfiles(data: PubgProfileUpdateInput!, where: PubgProfileWhereInput!): BatchPayload!
  updateManyLolProfiles(data: LolProfileUpdateInput!, where: LolProfileWhereInput!): BatchPayload!
  updateManySportsProfiles(data: SportsProfileUpdateInput!, where: SportsProfileWhereInput!): BatchPayload!
  updateManySoccerProfiles(data: SoccerProfileUpdateInput!, where: SoccerProfileWhereInput!): BatchPayload!
  updateManyBasketballProfiles(data: BasketballProfileUpdateInput!, where: BasketballProfileWhereInput!): BatchPayload!
  updateManyChatRooms(data: ChatRoomUpdateInput!, where: ChatRoomWhereInput!): BatchPayload!
  updateManyChats(data: ChatUpdateInput!, where: ChatWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput!): BatchPayload!
  deleteManyGameProfiles(where: GameProfileWhereInput!): BatchPayload!
  deleteManyPubgProfiles(where: PubgProfileWhereInput!): BatchPayload!
  deleteManyLolProfiles(where: LolProfileWhereInput!): BatchPayload!
  deleteManySportsProfiles(where: SportsProfileWhereInput!): BatchPayload!
  deleteManySoccerProfiles(where: SoccerProfileWhereInput!): BatchPayload!
  deleteManyBasketballProfiles(where: BasketballProfileWhereInput!): BatchPayload!
  deleteManyChatRooms(where: ChatRoomWhereInput!): BatchPayload!
  deleteManyChats(where: ChatWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  category: Category
  gameProfile: GameProfileCreateOneInput
  sportsProfile: SportsProfileCreateOneInput
  user: UserCreateOneWithoutProfilesInput
}

input ProfileCreateManyWithoutUserInput {
  create: [ProfileCreateWithoutUserInput!]
  connect: [ProfileWhereUniqueInput!]
}

input ProfileCreateWithoutUserInput {
  category: Category
  gameProfile: GameProfileCreateOneInput
  sportsProfile: SportsProfileCreateOneInput
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  category: Category
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  category: Category
  gameProfile: GameProfileUpdateOneInput
  sportsProfile: SportsProfileUpdateOneInput
  user: UserUpdateOneWithoutProfilesInput
}

input ProfileUpdateManyWithoutUserInput {
  create: [ProfileCreateWithoutUserInput!]
  connect: [ProfileWhereUniqueInput!]
  disconnect: [ProfileWhereUniqueInput!]
  delete: [ProfileWhereUniqueInput!]
  update: [ProfileUpdateWithoutUserInput!]
  upsert: [ProfileUpsertWithoutUserInput!]
}

input ProfileUpdateWithoutUserDataInput {
  category: Category
  gameProfile: GameProfileUpdateOneInput
  sportsProfile: SportsProfileUpdateOneInput
}

input ProfileUpdateWithoutUserInput {
  where: ProfileWhereUniqueInput!
  data: ProfileUpdateWithoutUserDataInput!
}

input ProfileUpsertWithoutUserInput {
  where: ProfileWhereUniqueInput!
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  category: Category
  category_not: Category
  category_in: [Category!]
  category_not_in: [Category!]
  gameProfile: GameProfileWhereInput
  sportsProfile: SportsProfileWhereInput
  user: UserWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
}

enum PubgMode {
  SQUAD
  DUO
}

type PubgProfileConnection {
  pageInfo: PageInfo!
  edges: [PubgProfileEdge]!
  aggregate: AggregatePubgProfile!
}

input PubgProfileCreateInput {
  mode: PubgMode
  server: PubgServer
  gameProfile: GameProfileCreateOneWithoutPubgInput
}

input PubgProfileCreateOneWithoutGameProfileInput {
  create: PubgProfileCreateWithoutGameProfileInput
  connect: PubgProfileWhereUniqueInput
}

input PubgProfileCreateWithoutGameProfileInput {
  mode: PubgMode
  server: PubgServer
}

type PubgProfileEdge {
  node: PubgProfile!
  cursor: String!
}

enum PubgProfileOrderByInput {
  id_ASC
  id_DESC
  mode_ASC
  mode_DESC
  server_ASC
  server_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PubgProfilePreviousValues {
  id: ID!
  mode: PubgMode
  server: PubgServer
}

type PubgProfileSubscriptionPayload {
  mutation: MutationType!
  node: PubgProfile
  updatedFields: [String!]
  previousValues: PubgProfilePreviousValues
}

input PubgProfileSubscriptionWhereInput {
  AND: [PubgProfileSubscriptionWhereInput!]
  OR: [PubgProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PubgProfileWhereInput
}

input PubgProfileUpdateInput {
  mode: PubgMode
  server: PubgServer
  gameProfile: GameProfileUpdateOneWithoutPubgInput
}

input PubgProfileUpdateOneWithoutGameProfileInput {
  create: PubgProfileCreateWithoutGameProfileInput
  connect: PubgProfileWhereUniqueInput
  disconnect: PubgProfileWhereUniqueInput
  delete: PubgProfileWhereUniqueInput
  update: PubgProfileUpdateWithoutGameProfileInput
  upsert: PubgProfileUpsertWithoutGameProfileInput
}

input PubgProfileUpdateWithoutGameProfileDataInput {
  mode: PubgMode
  server: PubgServer
}

input PubgProfileUpdateWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput!
  data: PubgProfileUpdateWithoutGameProfileDataInput!
}

input PubgProfileUpsertWithoutGameProfileInput {
  where: PubgProfileWhereUniqueInput!
  update: PubgProfileUpdateWithoutGameProfileDataInput!
  create: PubgProfileCreateWithoutGameProfileInput!
}

input PubgProfileWhereInput {
  AND: [PubgProfileWhereInput!]
  OR: [PubgProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mode: PubgMode
  mode_not: PubgMode
  mode_in: [PubgMode!]
  mode_not_in: [PubgMode!]
  server: PubgServer
  server_not: PubgServer
  server_in: [PubgServer!]
  server_not_in: [PubgServer!]
  gameProfile: GameProfileWhereInput
}

input PubgProfileWhereUniqueInput {
  id: ID
}

enum PubgServer {
  KAKAO
  ASIA
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  gameProfiles(where: GameProfileWhereInput, orderBy: GameProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameProfile]!
  pubgProfiles(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PubgProfile]!
  lolProfiles(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LolProfile]!
  sportsProfiles(where: SportsProfileWhereInput, orderBy: SportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SportsProfile]!
  soccerProfiles(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SoccerProfile]!
  basketballProfiles(where: BasketballProfileWhereInput, orderBy: BasketballProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasketballProfile]!
  chatRooms(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChatRoom]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  user(where: UserWhereUniqueInput!): User
  profile(where: ProfileWhereUniqueInput!): Profile
  gameProfile(where: GameProfileWhereUniqueInput!): GameProfile
  pubgProfile(where: PubgProfileWhereUniqueInput!): PubgProfile
  lolProfile(where: LolProfileWhereUniqueInput!): LolProfile
  sportsProfile(where: SportsProfileWhereUniqueInput!): SportsProfile
  soccerProfile(where: SoccerProfileWhereUniqueInput!): SoccerProfile
  basketballProfile(where: BasketballProfileWhereUniqueInput!): BasketballProfile
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  chat(where: ChatWhereUniqueInput!): Chat
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  gameProfilesConnection(where: GameProfileWhereInput, orderBy: GameProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameProfileConnection!
  pubgProfilesConnection(where: PubgProfileWhereInput, orderBy: PubgProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PubgProfileConnection!
  lolProfilesConnection(where: LolProfileWhereInput, orderBy: LolProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LolProfileConnection!
  sportsProfilesConnection(where: SportsProfileWhereInput, orderBy: SportsProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SportsProfileConnection!
  soccerProfilesConnection(where: SoccerProfileWhereInput, orderBy: SoccerProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SoccerProfileConnection!
  basketballProfilesConnection(where: BasketballProfileWhereInput, orderBy: BasketballProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BasketballProfileConnection!
  chatRoomsConnection(where: ChatRoomWhereInput, orderBy: ChatRoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatRoomConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  node(id: ID!): Node
}

type SoccerProfileConnection {
  pageInfo: PageInfo!
  edges: [SoccerProfileEdge]!
  aggregate: AggregateSoccerProfile!
}

input SoccerProfileCreateInput {
  players: Int
  sportsProfile: SportsProfileCreateOneWithoutSoccerInput
}

input SoccerProfileCreateOneWithoutSportsProfileInput {
  create: SoccerProfileCreateWithoutSportsProfileInput
  connect: SoccerProfileWhereUniqueInput
}

input SoccerProfileCreateWithoutSportsProfileInput {
  players: Int
}

type SoccerProfileEdge {
  node: SoccerProfile!
  cursor: String!
}

enum SoccerProfileOrderByInput {
  id_ASC
  id_DESC
  players_ASC
  players_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SoccerProfilePreviousValues {
  id: ID!
  players: Int
}

type SoccerProfileSubscriptionPayload {
  mutation: MutationType!
  node: SoccerProfile
  updatedFields: [String!]
  previousValues: SoccerProfilePreviousValues
}

input SoccerProfileSubscriptionWhereInput {
  AND: [SoccerProfileSubscriptionWhereInput!]
  OR: [SoccerProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SoccerProfileWhereInput
}

input SoccerProfileUpdateInput {
  players: Int
  sportsProfile: SportsProfileUpdateOneWithoutSoccerInput
}

input SoccerProfileUpdateOneWithoutSportsProfileInput {
  create: SoccerProfileCreateWithoutSportsProfileInput
  connect: SoccerProfileWhereUniqueInput
  disconnect: SoccerProfileWhereUniqueInput
  delete: SoccerProfileWhereUniqueInput
  update: SoccerProfileUpdateWithoutSportsProfileInput
  upsert: SoccerProfileUpsertWithoutSportsProfileInput
}

input SoccerProfileUpdateWithoutSportsProfileDataInput {
  players: Int
}

input SoccerProfileUpdateWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput!
  data: SoccerProfileUpdateWithoutSportsProfileDataInput!
}

input SoccerProfileUpsertWithoutSportsProfileInput {
  where: SoccerProfileWhereUniqueInput!
  update: SoccerProfileUpdateWithoutSportsProfileDataInput!
  create: SoccerProfileCreateWithoutSportsProfileInput!
}

input SoccerProfileWhereInput {
  AND: [SoccerProfileWhereInput!]
  OR: [SoccerProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  players: Int
  players_not: Int
  players_in: [Int!]
  players_not_in: [Int!]
  players_lt: Int
  players_lte: Int
  players_gt: Int
  players_gte: Int
  sportsProfile: SportsProfileWhereInput
}

input SoccerProfileWhereUniqueInput {
  id: ID
}

enum SportsCategory {
  SOCCER
  BASKETBALL
}

type SportsProfileConnection {
  pageInfo: PageInfo!
  edges: [SportsProfileEdge]!
  aggregate: AggregateSportsProfile!
}

input SportsProfileCreateInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileCreateOneWithoutSportsProfileInput
  basketball: BasketballProfileCreateOneWithoutSportsProfileInput
}

input SportsProfileCreateOneInput {
  create: SportsProfileCreateInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateOneWithoutBasketballInput {
  create: SportsProfileCreateWithoutBasketballInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateOneWithoutSoccerInput {
  create: SportsProfileCreateWithoutSoccerInput
  connect: SportsProfileWhereUniqueInput
}

input SportsProfileCreateWithoutBasketballInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileCreateOneWithoutSportsProfileInput
}

input SportsProfileCreateWithoutSoccerInput {
  sportsCategory: SportsCategory
  basketball: BasketballProfileCreateOneWithoutSportsProfileInput
}

type SportsProfileEdge {
  node: SportsProfile!
  cursor: String!
}

enum SportsProfileOrderByInput {
  id_ASC
  id_DESC
  sportsCategory_ASC
  sportsCategory_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SportsProfilePreviousValues {
  id: ID!
  sportsCategory: SportsCategory
}

type SportsProfileSubscriptionPayload {
  mutation: MutationType!
  node: SportsProfile
  updatedFields: [String!]
  previousValues: SportsProfilePreviousValues
}

input SportsProfileSubscriptionWhereInput {
  AND: [SportsProfileSubscriptionWhereInput!]
  OR: [SportsProfileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SportsProfileWhereInput
}

input SportsProfileUpdateInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileUpdateOneWithoutSportsProfileInput
  basketball: BasketballProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateOneInput {
  create: SportsProfileCreateInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
}

input SportsProfileUpdateOneWithoutBasketballInput {
  create: SportsProfileCreateWithoutBasketballInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutBasketballInput
  upsert: SportsProfileUpsertWithoutBasketballInput
}

input SportsProfileUpdateOneWithoutSoccerInput {
  create: SportsProfileCreateWithoutSoccerInput
  connect: SportsProfileWhereUniqueInput
  disconnect: SportsProfileWhereUniqueInput
  delete: SportsProfileWhereUniqueInput
  update: SportsProfileUpdateWithoutSoccerInput
  upsert: SportsProfileUpsertWithoutSoccerInput
}

input SportsProfileUpdateWithoutBasketballDataInput {
  sportsCategory: SportsCategory
  soccer: SoccerProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput!
  data: SportsProfileUpdateWithoutBasketballDataInput!
}

input SportsProfileUpdateWithoutSoccerDataInput {
  sportsCategory: SportsCategory
  basketball: BasketballProfileUpdateOneWithoutSportsProfileInput
}

input SportsProfileUpdateWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput!
  data: SportsProfileUpdateWithoutSoccerDataInput!
}

input SportsProfileUpsertWithoutBasketballInput {
  where: SportsProfileWhereUniqueInput!
  update: SportsProfileUpdateWithoutBasketballDataInput!
  create: SportsProfileCreateWithoutBasketballInput!
}

input SportsProfileUpsertWithoutSoccerInput {
  where: SportsProfileWhereUniqueInput!
  update: SportsProfileUpdateWithoutSoccerDataInput!
  create: SportsProfileCreateWithoutSoccerInput!
}

input SportsProfileWhereInput {
  AND: [SportsProfileWhereInput!]
  OR: [SportsProfileWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sportsCategory: SportsCategory
  sportsCategory_not: SportsCategory
  sportsCategory_in: [SportsCategory!]
  sportsCategory_not_in: [SportsCategory!]
  soccer: SoccerProfileWhereInput
  basketball: BasketballProfileWhereInput
}

input SportsProfileWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  gameProfile(where: GameProfileSubscriptionWhereInput): GameProfileSubscriptionPayload
  pubgProfile(where: PubgProfileSubscriptionWhereInput): PubgProfileSubscriptionPayload
  lolProfile(where: LolProfileSubscriptionWhereInput): LolProfileSubscriptionPayload
  sportsProfile(where: SportsProfileSubscriptionWhereInput): SportsProfileSubscriptionPayload
  soccerProfile(where: SoccerProfileSubscriptionWhereInput): SoccerProfileSubscriptionPayload
  basketballProfile(where: BasketballProfileSubscriptionWhereInput): BasketballProfileSubscriptionPayload
  chatRoom(where: ChatRoomSubscriptionWhereInput): ChatRoomSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chatRooms: ChatRoomCreateManyWithoutUsersInput
  chats: ChatCreateManyWithoutUserInput
}

input UserCreateManyWithoutChatRoomsInput {
  create: [UserCreateWithoutChatRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutChatsInput {
  create: UserCreateWithoutChatsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChatRoomsInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chats: ChatCreateManyWithoutUserInput
}

input UserCreateWithoutChatsInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileCreateManyWithoutUserInput
  chatRooms: ChatRoomCreateManyWithoutUsersInput
}

input UserCreateWithoutProfilesInput {
  facebookUserId: String
  googleUserId: String
  chatRooms: ChatRoomCreateManyWithoutUsersInput
  chats: ChatCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  googleUserId_ASC
  googleUserId_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String
  googleUserId: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutChatRoomsInput {
  create: [UserCreateWithoutChatRoomsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutChatRoomsInput!]
  upsert: [UserUpsertWithoutChatRoomsInput!]
}

input UserUpdateOneWithoutChatsInput {
  create: UserCreateWithoutChatsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutChatsInput
  upsert: UserUpsertWithoutChatsInput
}

input UserUpdateOneWithoutProfilesInput {
  create: UserCreateWithoutProfilesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutProfilesInput
  upsert: UserUpsertWithoutProfilesInput
}

input UserUpdateWithoutChatRoomsDataInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateWithoutChatRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatRoomsDataInput!
}

input UserUpdateWithoutChatsDataInput {
  facebookUserId: String
  googleUserId: String
  profiles: ProfileUpdateManyWithoutUserInput
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
}

input UserUpdateWithoutChatsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatsDataInput!
}

input UserUpdateWithoutProfilesDataInput {
  facebookUserId: String
  googleUserId: String
  chatRooms: ChatRoomUpdateManyWithoutUsersInput
  chats: ChatUpdateManyWithoutUserInput
}

input UserUpdateWithoutProfilesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProfilesDataInput!
}

input UserUpsertWithoutChatRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatRoomsDataInput!
  create: UserCreateWithoutChatRoomsInput!
}

input UserUpsertWithoutChatsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatsDataInput!
  create: UserCreateWithoutChatsInput!
}

input UserUpsertWithoutProfilesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProfilesDataInput!
  create: UserCreateWithoutProfilesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  facebookUserId: String
  facebookUserId_not: String
  facebookUserId_in: [String!]
  facebookUserId_not_in: [String!]
  facebookUserId_lt: String
  facebookUserId_lte: String
  facebookUserId_gt: String
  facebookUserId_gte: String
  facebookUserId_contains: String
  facebookUserId_not_contains: String
  facebookUserId_starts_with: String
  facebookUserId_not_starts_with: String
  facebookUserId_ends_with: String
  facebookUserId_not_ends_with: String
  googleUserId: String
  googleUserId_not: String
  googleUserId_in: [String!]
  googleUserId_not_in: [String!]
  googleUserId_lt: String
  googleUserId_lte: String
  googleUserId_gt: String
  googleUserId_gte: String
  googleUserId_contains: String
  googleUserId_not_contains: String
  googleUserId_starts_with: String
  googleUserId_not_starts_with: String
  googleUserId_ends_with: String
  googleUserId_not_ends_with: String
  profiles_every: ProfileWhereInput
  profiles_some: ProfileWhereInput
  profiles_none: ProfileWhereInput
  chatRooms_every: ChatRoomWhereInput
  chatRooms_some: ChatRoomWhereInput
  chatRooms_none: ChatRoomWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
  googleUserId: String
}
